<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[拴萝卜的棍子]]></title>
  <subtitle><![CDATA[萝卜的技术博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://leeluolee.github.com/"/>
  <updated>2017-09-13T17:19:49.146Z</updated>
  <id>http://leeluolee.github.com/</id>
  
  <author>
    <name><![CDATA[leeluolee]]></name>
    <email><![CDATA[87399126@163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[关于Function.prototype.toString的野生小技巧]]></title>
    <link href="http://leeluolee.github.com/2015/04/13/function-to-string/"/>
    <id>http://leeluolee.github.com/2015/04/13/function-to-string/</id>
    <published>2015-04-13T03:46:36.000Z</published>
    <updated>2015-04-15T12:36:25.000Z</updated>
    <content type="html"><![CDATA[<p><strong>⚠约定</strong>: 以下将<code>Function.prototype.toString</code>简称为<code>fn.toString</code></p>
<p><em>我发现自己快没救了，又把一个短文硬生生写成了长文，客官慢用…</em></p>
<h2 id="先介绍下Function-protoype-toString"><strong>先介绍下Function.protoype.toString</strong></h2>
<blockquote>
<p>The toString() method returns a string representing the source code of the function.<br>—- from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString" target="_blank" rel="external">MDN</a></p>
</blockquote>
<p>即这个原型方法可以帮助你获得 <strong>函数的源代码！！</strong>, 比如</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span> <span class="params">( msg )</span></span>{</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"hello"</span>)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( hello.toString() );</div></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'function hello( msg ){ \</span></div><div class="line">  console.log("hello") \</div><div class="line">}'</div></pre></td></tr></table></figure>

<p>这个方法真是碉堡了…, 通过合适的正则, 我们可以从中提取出丰富的信息.</p>
<ul>
<li>函数名</li>
<li>函数形参列表</li>
<li>函数源代码</li>
</ul>
<p>这些信息提供了javascript意想不到的灵活性, 我们来看看野生的例子吧.</p>
<h2 id="提取AMD模块定义里的依赖列表-">提取AMD模块定义里的依赖列表.</h2>
<p>熟悉AMD或者被CMD科普过的同学应该知道，AMD中是这样定义模块的.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 模块c的定义</span></div><div class="line">define( [<span class="string">'a'</span>, <span class="string">'b'</span>] ,<span class="function"><span class="keyword">function</span> <span class="params">( a, b )</span> </span>{</div><div class="line"></div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    action: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="keyword">return</span> a.key + b.key;</div><div class="line">    }</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<p>当此模块加载完成的同时define函数将被运行，传入依赖列表的<code>&#39;b&#39;</code>和<code>&#39;a&#39;</code>指导模块加载器需要先获得他们的模块定义, 并以参数形式注入到<code>c</code>模块的factory函数. 所以明确声明的<code>[&#39;a&#39;, &#39;b&#39;]</code>依赖列表至关重要，它指导模块下一步的策略.</p>
<p>事实上，AMD规范中也定义了一种叫<a href="https://github.com/amdjs/amdjs-api/wiki/AMD#simplified-commonjs-wrapping-" target="_blank" rel="external">simplified commonjs wrapping</a>的写法, 可以以类commonjs的写法来定义一个模块.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> <span class="params">(require, exports, module)</span> </span>{</div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>),</div><div class="line">      b = <span class="built_in">require</span>(<span class="string">'b'</span>);</div><div class="line"></div><div class="line">  exports.action = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> a.key + b.key;</div><div class="line">  };</div><div class="line">});</div></pre></td></tr></table></figure>

<p>依赖变成了【使用注入到模块的<code>require</code>函数引入】(如<code>require(&#39;a&#39;)</code>), 但是这就带来了一个问题, <strong>如何获得此模块的依赖列表?</strong></p>
<p>答案当然是使用<code>function.toString</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> rRequire = <span class="regexp">/\brequire\(["'](\w+)["']\)/g</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDependencies</span><span class="params">( fn )</span></span>{</div><div class="line">  <span class="keyword">var</span> map = {};</div><div class="line">  fn.toString().replace(rRequire, <span class="function"><span class="keyword">function</span><span class="params">(all, dep)</span></span>{</div><div class="line">    map[dep] = <span class="number">1</span>;</div><div class="line">  })</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.keys(map);</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line">getDependencies(<span class="function"><span class="keyword">function</span><span class="params">(require, exports)</span></span>{</div><div class="line"></div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"a"</span>);</div><div class="line">    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">"b"</span>);</div><div class="line"></div><div class="line">    exports.c = <span class="built_in">require</span>(<span class="string">"a"</span>).key + b.key;</div><div class="line">})</div><div class="line"></div><div class="line"><span class="comment">// =&gt; ["a", "b"]</span></div></pre></td></tr></table></figure>

<p>输出<code>[&quot;a&quot;, &quot;b&quot;]</code>, 我们成功获得依赖列表.</p>
<p>当然，这里的正则是简化版的，实际要处理的情况要复杂的多，比如你至少要过滤掉注释里的信息.</p>
<h2 id="多行字符串">多行字符串</h2>
<p>关注ES6的同学应该知道， 在ES6中新增一个特性叫<a href="https://babeljs.io/docs/learn-es6/#template-strings" target="_blank" rel="external">Template String</a>, 除了支持插值可以获得微弱的模板能力之外，它还有一个能力就是</p>
<blockquote>
<p><strong>支持多行字符串的定义</strong></p>
</blockquote>
<p>这个在你定义多行模板字符串的时候非常有用, 可以避免不直观的字符串拼接操作.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> template = `</div><div class="line">&lt;div&gt;</div><div class="line">   <span class="xml"><span class="tag">&lt;<span class="title">h2</span>&gt;</span>{blog.title}<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span></div><div class="line">   <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">'content'</span>&gt;</span>{blog.content}<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">`</div></pre></td></tr></table></figure>

<p>这个等同于</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> template = <span class="string">"&lt;div&gt;"</span> +</div><div class="line">   <span class="string">"&lt;h2&gt;{blog.title}&lt;/h2&gt;"</span> +</div><div class="line">   <span class="string">"&lt;div class='content'&gt;{blog.content}&lt;/div&gt;"</span>+</div><div class="line"><span class="string">"&lt;/div&gt;"</span></div></pre></td></tr></table></figure>

<p>是不是清晰方便了很多. <strong>可问题是ES6现在正式来了吗？</strong> 没有…</p>
<p>Duang~ <code>function.toString</code>又闪亮登场, 一解我们青黄不接时的尴尬.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rComment = <span class="regexp">/\/\*([\s\S]*?)\*\//</span>;</div><div class="line"><span class="comment">// multiply string</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ms</span><span class="params">(fn)</span></span>{</div><div class="line">  <span class="keyword">return</span> fn.toString().match(rComment)[<span class="number">1</span>]</div><div class="line">};</div><div class="line"></div><div class="line">ms(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{<span class="comment">/*</span></div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h2&gt;{blog.title}&lt;/h2&gt;</div><div class="line">    &lt;div class='content'&gt;{blog.content}&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">*/})</div></pre></td></tr></table></figure>

<p>将会输出下面这段字符串</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="title">h2</span>&gt;</span>{blog.title}<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">'content'</span>&gt;</span>{blog.content}<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p>因为在通过<code>fn.toString()</code>的时候， 同时会保留函数中的注释，但是注释是不会被执行的，所以我们可以安全的在注释中写一些非js语句，就比如html.</p>
<p>事实上github上已经有一个<a href="https://github.com/sindresorhus/multiline" target="_blank" rel="external">无聊的库</a>做了这件事，并获得了1200个star…,<br>我记得13年做内部系统时就已经用上了这个trick, 所以现在做什么都得快, 勿以点子小而不为.</p>
<p><em>题外话: 管理模板当然有更好的解决方案，可以参考 <a href="http://regularjs.github.io/guide/zh/template/README.html" target="_blank" rel="external">Regularjs指南:如何优雅的管理你的模板</a></em></p>
<h2 id="基于形参约定的依赖注入">基于形参约定的依赖注入</h2>
<p>Angular里有个很大的噱头就是它的依赖注入。</p>
<p>假设现在有如下一段Angularjs的代码，它定义了2个factory:<code>greeter</code>和<code>runner</code>, 以及controller<code>MyController</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>, [])</div><div class="line">.factory(<span class="string">'greeter'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    greet: <span class="function"><span class="keyword">function</span><span class="params">(msg)</span> </span>{ alert(msg); }</div><div class="line">  }</div><div class="line">})</div><div class="line">.factory(<span class="string">'runner'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    run: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{  }</div><div class="line">  }</div><div class="line">})</div><div class="line">.controller(<span class="string">'MyController'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope, greeter)</span> </span>{</div><div class="line">  $scope.sayHello = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    greeter.greet(<span class="string">"Hello!"</span>);</div><div class="line">  };</div><div class="line">});</div></pre></td></tr></table></figure>

<p>注意这个controller会在angular内部compile遇到节点上的某个指令比如<code>&lt;div ng-controller=&quot;MyController&quot;&gt;</code>时被调用.</p>
<p>现在问题来了, <strong>angular如何知道要传入什么参数呢</strong>？ 比如上例中的controller其实是需要两个参数的.</p>
<p><strong>答案是基于形参名的推测</strong></p>
<p>你可以先简单理解为在每次调用factory等函数时, 对应的定义会缓存起来，例如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cache = {</div><div class="line">  greeter: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line"></div><div class="line">  },</div><div class="line">  runner: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line"></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>既然如此，现在要做的就是获得依赖, <code>function.toString</code>可以帮助我们从形参中获得这些信息</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> rArgs = <span class="regexp">/^function\s*[^\(]*\(\s*([^\)]*)\)/m</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParamNames</span><span class="params">( fn )</span></span>{</div><div class="line">  <span class="keyword">var</span> argStr = fn.toString().match(rArgs)[<span class="number">1</span>].trim();</div><div class="line">  <span class="keyword">return</span> argStr? argStr.split(<span class="regexp">/\s*,\s*/</span>): [];</div><div class="line">}</div><div class="line"></div><div class="line">getParamNames(<span class="function"><span class="keyword">function</span><span class="params">( $scope, greeter )</span></span>{})</div><div class="line"></div><div class="line"><span class="comment">// ["$scope", "greeter"]</span></div></pre></td></tr></table></figure>

<p>输出<code>[&quot;$scope&quot;, &quot;greeter&quot;]</code>, 也就意味着我们获得了依赖列表， 这样我们就可以从cache中获得对应的定义了.</p>
<p><strong>即便如此，作者仍然觉得angular式的依赖注入其实完全是一种设计过度, 无论是基于推断还是显示声明</strong></p>
<h2 id="继承中的super()实现-">继承中的<code>super()</code>实现.</h2>
<p>10个前端9个看了js高程那本红书吧，我们先来看下教科书版本的js继承的实现</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 基类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mesh</span><span class="params">()</span></span>{}</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SkinnedMesh</span><span class="params">( geometry, materials )</span></span>{</div><div class="line">  Mesh.call( <span class="keyword">this</span>, geometry, materials )</div><div class="line">  <span class="comment">// blablabla...</span></div><div class="line">}</div><div class="line"><span class="comment">// 避免new Mesh，带来的两次构造函数调用</span></div><div class="line">SkinnedMesh.prototye = <span class="built_in">Object</span>.create(Mesh.prototype)</div><div class="line">SkinnedMesh.prototye.constructor = Mesh;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// other</span></div><div class="line"></div><div class="line">SkinnedMesh.prototype.update = <span class="function"><span class="keyword">function</span><span class="params">(camera)</span></span>{</div><div class="line">  Mesh.prototype.update.call(<span class="keyword">this</span>, camera);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这种继承方式足够用，但是有几个问题.</p>
<ul>
<li>调用父类函数真的足够繁琐</li>
<li>一旦父类发生改变，所有对父类的调用都要改写</li>
<li>从编程逻辑上看， 这种类式继承不够直观</li>
</ul>
<p>如果是下面这种方式呢？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> SkinnedMesh = Mesh.extend({</div><div class="line">  <span class="comment">// 履行构造函数职责</span></div><div class="line">  init: <span class="function"><span class="keyword">function</span><span class="params">( geometry, materials )</span></span>{</div><div class="line">    <span class="comment">// 由于super是关键字，修改为supr</span></div><div class="line">    <span class="keyword">this</span>.supr( geometry, materials ); <span class="comment">// 调用父类同名方法</span></div><div class="line">  },</div><div class="line">  update: <span class="function"><span class="keyword">function</span><span class="params">( camera )</span></span>{</div><div class="line">    <span class="keyword">this</span>.supr() <span class="comment">// 调用Mesh.prototype.update</span></div><div class="line">  }</div><div class="line">})</div></pre></td></tr></table></figure>

<p><em>上面这段写法其实就是来自于著名的<a href="https://github.com/ded/klass" target="_blank" rel="external">ded/klass</a></em></p>
<p>是不是直观了很多， 事实上上面这段代码修改为使用coffeescript等语法噪音弱的语言来书写，已经非常接近与有关键字支持的语言了.<br>但相信不少人还是会疑惑, 为什么在<code>init</code>和<code>update</code>中调用<code>this.supr()</code>为什么可以准确定位到父类不同的方法？</p>
<p>其实，在extend的同时就已经在查找规则封装好了, 让我们将这个问题简化为两个对象间的继承。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span><span class="params">(child, parent)</span></span>{</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> child ) <span class="keyword">if</span> (child.hasOwnProperty(i) ){</div><div class="line">      wrap(i, child, parent)</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> child;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">var</span> rSupr = <span class="regexp">/\bsupr\b/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrap</span><span class="params">(name, child, parent)</span></span>{</div><div class="line">  <span class="keyword">var</span> method = child[name],</div><div class="line">    superMethod = parent[name];</div><div class="line"></div><div class="line">  <span class="comment">// 我们通过fn.toString() 打印出方法体，并确保它使用的this.supr()</span></div><div class="line">  <span class="keyword">if</span>( rSupr.test( method.toString() ) && superMethod) {</div><div class="line">    superMethod = superMethod.bind(child);</div><div class="line">    child[name] = <span class="function"><span class="keyword">function</span><span class="params">(arguments)</span></span>{</div><div class="line">        <span class="comment">// 保证嵌套函数调用时候正确</span></div><div class="line">        <span class="keyword">var</span> preSuper = child.supr;</div><div class="line">        child.supr = superMethod;</div><div class="line">        method.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">        child.supr = preSuper</div><div class="line">    }</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">var</span> mesh = {</div><div class="line"></div><div class="line">  init: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"mesh init "</span>);</div><div class="line">  },</div><div class="line">  update: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">" mesh update"</span>);</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">var</span> skinnedmesh = extend({</div><div class="line"></div><div class="line">  init: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">this</span>.supr()</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"skinnedmesh init "</span>);</div><div class="line">  },</div><div class="line">  update: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">this</span>.supr()</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">" skinnedmesh update"</span>);</div><div class="line">  }</div><div class="line">}, mesh)</div><div class="line"></div><div class="line">skinnedmesh.init();</div><div class="line">skinnedmesh.update();</div></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">mesh init</div><div class="line">skinnedmesh init</div><div class="line">mesh update</div><div class="line">skinnedmesh update</div></pre></td></tr></table></figure>

<p>其中, fn.toString()输出方法源码， 并通过正则判断是否源码中调用了supr(). 如果是就包一层函数用来动态的制定this.supr对应的方法。</p>
<p>是不是挺奇妙的构想？事实上由于方法的包裹是发生在extend时，在方法运行时，是没有查找开销的，所以很多框架都使用这个技巧来实现一个简化的继承模型. 包括<a href="https://github.com/regularjs/regular" target="_blank" rel="external">Regularjs</a></p>
<p><strong>题外话:</strong> 再往前看一点，在ES6规范中，已经引入了语言级别的<code>class</code>支持</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> SkinnedMesh extends Mesh {</div><div class="line">  constructor(geometry, materials) {</div><div class="line">    super(geometry, materials);</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line">  }</div><div class="line">  update( camera ) {</div><div class="line">    <span class="comment">//...</span></div><div class="line">    super.update( camera );</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>注意构造函数里的super和update里的<code>super()</code>以及<code>super.update()</code>分别用来调用父类的构造函数和实例方法, 相当于</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Mesh.call(<span class="keyword">this</span>, geometry, materials)</div><div class="line"></div><div class="line">Mesh.prototype.update.call(<span class="keyword">this</span>)</div></pre></td></tr></table></figure>

<p>但还是那个问题: <strong>ES6目前可用了吗?</strong></p>
<h2 id="序列化函数">序列化函数</h2>
<p>什么是函数序列化，即将函数序列话成字符串这种通用数据格式 这样可以实现<strong>程序逻辑在不同的runtime之间传递</strong></p>
<p>我们这里点一个应用场景: 不依赖外部js文件时仍能使用webworker帮助我们进行并行计算</p>
<h3 id="什么是webworker">什么是webworker</h3>
<p>在浏览器中， js的执行与UI更新是公用一个进程, 这导致它们会互相阻塞, 用户直接的感受就是, 在长时间的脚本执行中，界面会“卡住”.</p>
<p>特别在很多处理大列表的场景中，熟练的程序员会通过(setTimeout/setInterval/requestAnimationFrame)等方法来模拟任务分片，<strong>好为UI线程腾出时间</strong>, 这样用户的体验就是按钮可以点了，但总的完成时间其实是增加了</p>
<p>有没有一种一劳永逸的方法呢？ <strong>webworker</strong></p>
<blockquote>
<p>Web Workers provide a simple means for web content to run scripts in background threads.<br>—- <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="external">MDN: webworker</a></p>
</blockquote>
<p>即我们可以将耗时的计算任务放置在后台运行， 完成之后通过事件来通知主线程, <strong>注意它会真正生成系统级别的线程，而不是模拟出来的</strong>。</p>
<p><em>事实上，worker分为专用worker和共享worker，我们只会涉及到前者</em></p>
<p>我们来个耗时的例子，第一个映入我脑帘的就是计算斐波那契数列, 足够简单但是足够耗时, 就它了。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"num"</span> <span class="attribute">placeholder</span>=<span class="value">"请输入你要计算的数值"</span> <span class="attribute">value</span>=<span class="value">40</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onclick</span>=<span class="value">"compute()"</span>&gt;</span>使用worker计算<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onclick</span>=<span class="value">"compute(1)"</span>&gt;</span>不使用worker<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">hr</span>/&gt;</span></div><div class="line">结果: <span class="tag">&lt;<span class="title">output</span> <span class="attribute">id</span>=<span class="value">"result"</span>&gt;</span><span class="tag">&lt;/<span class="title">output</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">button</span>&gt;</span>点我看看UI线程阻塞了吗<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'mytask.js'</span>);</div><div class="line">  <span class="keyword">var</span> vnode = <span class="built_in">document</span>.getElementById(<span class="string">"num"</span>);</div><div class="line">  <span class="keyword">var</span> rnode = <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">compute</span><span class="params">(noWorker)</span> </span>{</div><div class="line">    <span class="keyword">var</span> value = <span class="built_in">parseInt</span>(vnode.value || <span class="number">0</span>, <span class="number">10</span>) ;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(noWorker){</div><div class="line">      <span class="built_in">console</span>.time(<span class="string">"fibonacci-noworker"</span>)</div><div class="line">      rnode.textContent = fibonacci( value );</div><div class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.timeEnd(<span class="string">"fibonacci-noworker"</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.time(<span class="string">"fibonacci-worker"</span>)</div><div class="line">    worker.postMessage( value );</div><div class="line">  }</div><div class="line"></div><div class="line"></div><div class="line">  worker.onmessage= <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>{</div><div class="line">    rnode.textContent = e.data;</div><div class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">"fibonacci-worker"</span>);</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span><span class="params">(n)</span> </span>{</div><div class="line">    <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</div><div class="line">    <span class="keyword">return</span> fibonacci( n - <span class="number">1</span> ) + fibonacci(n - <span class="number">2</span>);</div><div class="line">  }</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>对应的mytask.js,如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">onmessage = <span class="function"><span class="keyword">function</span><span class="params">( ev )</span></span>{</div><div class="line">  self.postMessage( fibonacci( ev.data ) );</div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span><span class="params">(n)</span> </span>{</div><div class="line">  <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</div><div class="line">  <span class="keyword">return</span> fibonacci( n - <span class="number">1</span> ) + fibonacci(n - <span class="number">2</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>mytask.js与worker.html的文件结构如下.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">└── <span class="built_in">folder</span></div><div class="line">  ├── mytask.js</div><div class="line">  └── worker.html</div></pre></td></tr></table></figure>

<p>打开worker.html, 分别点击两个按钮, 你会发现控制台输出结果是这样的.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fibonacci-worker: <span class="number">1299.735</span>ms</div><div class="line">fibonacci-noworker: <span class="number">5198.129</span>ms</div></pre></td></tr></table></figure>

<p>使用worker的版本速度会更高一些， 当然更关键的问题是 <strong>noworker版本阻塞的UI线程，使得button等控件都没有反应了</strong>.</p>
<h3 id="使用function-toString实现单文件的Webworker运算">使用function.toString实现单文件的Webworker运算</h3>
<p>但是, <strong>非worker版本有个好处就是逻辑定义都在一个文件里</strong>， 而不用分散计算逻辑到子文件， 有没有两全的方案呢？</p>
<p>答案是 <strong>使用<code>function.toString()</code> 和 <code>URL.createObjectURL</code> 方法来动态创建脚本文件内容</strong>.</p>
<p>我们对worker.html做以下调整</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"num"</span> <span class="attribute">placeholder</span>=<span class="value">"请输入你要计算的数值"</span> <span class="attribute">value</span>=<span class="value">40</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">onclick</span>=<span class="value">"compute()"</span>&gt;</span>使用内联式的worker计算<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">hr</span>/&gt;</span></div><div class="line">结果: <span class="tag">&lt;<span class="title">output</span> <span class="attribute">id</span>=<span class="value">"result"</span>&gt;</span><span class="tag">&lt;/<span class="title">output</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">button</span>&gt;</span>点我看看UI线程阻塞了吗<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">workerify</span><span class="params">(fn)</span> </span>{</div><div class="line">    <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(</div><div class="line">        URL.createObjectURL(<span class="keyword">new</span> Blob([</div><div class="line">           <span class="string">'self.onmessage = '</span> + fn.toString()], {</div><div class="line">           type: <span class="string">'application/javascript'</span></div><div class="line">        })</div><div class="line">    ));</div><div class="line">    <span class="keyword">return</span> worker</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">compute</span><span class="params">(noWorker)</span> </span>{</div><div class="line">    <span class="keyword">var</span> value = <span class="built_in">parseInt</span>(vnode.value || <span class="number">0</span>, <span class="number">10</span>) ;</div><div class="line">    worker.postMessage( value );</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">var</span> worker = workerify(<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span><span class="params">(n)</span> </span>{</div><div class="line">      <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</div><div class="line">      <span class="keyword">return</span> fibonacci( n - <span class="number">1</span> ) + fibonacci(n - <span class="number">2</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> self.postMessage( fibonacci(e.data) )</div><div class="line">  })</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">var</span> vnode = <span class="built_in">document</span>.getElementById(<span class="string">"num"</span>);</div><div class="line">  <span class="keyword">var</span> rnode = <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>);</div><div class="line"></div><div class="line">  worker.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{</div><div class="line">    rnode.textContent = e.data;</div><div class="line">  }</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>这一次，我们不再需要mytask.js了，因为这个文件内容其实已经通过 <code>URL.createObjectURL</code> 和 <code>Blob</code>创建出来了. 关于这两个API的详细描述，大家请自行MDN，再延伸下去，此文就没法控制了。</p>
<h2 id="总结">总结</h2>
<p>其实<code>fn.toString()</code>所有的能力都归结为它可以得到函数源码，配合new Function(), 事实上还可以产生更大的可能性. 比如我们可以将服务器端的逻辑传递到客户端，<br>而不仅仅只是传递数据.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>⚠约定</strong>: 以下将<code>Function.prototype.toString</code>简称为<code>fn.toString</code></p>
<p><em>我发现自己快没救了，又把一个短文硬生生写成了长文，客官慢用…</em></p>
<h2 id="先介绍下Function-protoype-toString"><strong>先介绍下Function.protoype.toString</strong></h2>
<blockquote>
<p>The toString() method returns a string representing the source code of the function.<br>—- from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString" target="_blank" rel="external">MDN</a></p>
</blockquote>
<p>即这个原型方法可以帮助你获得 <strong>函数的源代码！！</strong>, 比如</p>
]]>
    
    </summary>
    
      <category term="javascript" scheme="http://leeluolee.github.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[]]></title>
    <link href="http://leeluolee.github.com/2015/04/06/how-ls-help-you-diff-two-array/"/>
    <id>http://leeluolee.github.com/2015/04/06/how-ls-help-you-diff-two-array/</id>
    <published>2015-04-06T13:59:36.000Z</published>
    <updated>2015-04-20T11:14:43.000Z</updated>
    <content type="html"><![CDATA[<p>title: 使用莱文斯坦距离（Levenshtein distance）计算两数组的差异<br>tags: [algorithm, javascript]<br>date: 2014-10-21 21:40:04</p>
<p>—</p>
<h2 id="前言">前言</h2>
<p><a href="http://en.wikipedia.org/wiki/Levenshtein_distance" target="_blank" rel="external">莱文斯坦距离(Levenshtein distance以下简称ld)</a>是一种常见的算法或可以称之为一种度量单位(前提是操作权重确定)，它用于表示从字串序列A到字串序列B所需要进行操作(增加、删除、更新)的综合。</p>
<p><strong>鉴于数组与字符的相似性，这个算法当然同样适合与数组</strong></p>
<p>问题是作为一个前端开发，你不好好切图，用这个算法做啥？</p>
<p>事实上<a href="https://github.com/regularjs/regular/" target="_blank" rel="external">Regularjs</a>内部就使用到了这种算法，它用于检测数组的变动差异，并将差异反映到View中(即Dom)。</p>
<p>ld算法的另一个好处是，可以容易的将计算结果映射到未来将会到来的JS ES6<a href="http://wiki.ecmascript.org/doku.php?id=harmony:observe_api_usage#array" target="_blank" rel="external">Array.observe</a>的返回值形式，方便未来的无缝迁移。</p>
<a id="more"></a>
<h2 id="原理描述">原理描述</h2>
<p><img src="http://upload.wikimedia.org/math/d/4/f/d4f80cafb626ae9d9b8dc748360f61ec.png" alt="ld算法"></p>
<p>上图从Wiki上引用，它表示了LD距离的计算的基本原理，事实上我们需要提取编辑路径，这样我们才可以映射到具体的路径操作(比如更新dom).</p>
<p>在执行ld算法后，我们可以得到这样的二维矩阵</p>
<p><img src="https://leeluolee.github.io/attach/ld/ld-table.png" alt="ld table"></p>
<p>生成的矩阵的最后一个单元格, 即代表LS计算距离，这里从最后一个单元格回溯，我们就可以获得到从字符串A到字符串B的操作步骤，其中各个方向代表的含义是：</p>
<ol>
<li>左上角: 不变或者替换（根据ld距离是否改变）</li>
<li>直左：代表删除一个字符</li>
<li>直右： 代表增加一个字符</li>
</ol>
<p><strong>具体路径选择根据特定环境而定</strong> 比如我们由于后续要用于dom更新的特点，我们需要保留的原对象越多越好。</p>
<h3 id="【一知半解？戳这个demo】"><a href="http://codepen.io/leeluolee/pen/GnkAC" target="_blank" rel="external">【一知半解？戳这个demo】</a></h3>
<p data-height="266" data-theme-id="480" data-slug-hash="GnkAC" data-default-tab="result" data-user="leeluolee" class="codepen">See the Pen <a href="http://codepen.io/leeluolee/pen/GnkAC/" target="_blank" rel="external">GnkAC</a> by leeluolee (<a href="http://codepen.io/leeluolee" target="_blank" rel="external">@leeluolee</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p> 

<p>你可以手动输入字符串1和字符串2，由于使用了<a href="https://github.com/regularjs/regular" target="_blank" rel="external">Regularjs</a>，结果会实时响应。</p>
<h2 id="javascript实现源代码">javascript实现源代码</h2>
<p><strong>说明</strong></p>
<ol>
<li>diff用来生成首次路径matrix</li>
<li>whole函数用来回溯路径matrix，选择最合适路径</li>
<li>这里除了算法本身，还引入了转换数据格式的逻辑，方便后续操作</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ld = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">  <span class="comment">// 代表判定两者是否相等依据，这里我们认为 ===</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">equals</span><span class="params">(a,b)</span></span>{</div><div class="line">    <span class="keyword">return</span> a === b;</div><div class="line">  }</div><div class="line">  <span class="comment">// 计算</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">diff</span><span class="params">(array1, array2)</span></span>{</div><div class="line">    <span class="keyword">var</span> n = array1.length;</div><div class="line">    <span class="keyword">var</span> m = array2.length;</div><div class="line">    <span class="keyword">var</span> matrix = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= n; i++){</div><div class="line">      matrix.push([i]);</div><div class="line">    }</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;=m;j++){</div><div class="line">      matrix[<span class="number">0</span>][j]=j;</div><div class="line">    }</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++){</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= m; j++){</div><div class="line">        <span class="keyword">if</span>(equals(array1[i-<span class="number">1</span>], array2[j-<span class="number">1</span>])){</div><div class="line">          matrix[i][j] = matrix[i-<span class="number">1</span>][j-<span class="number">1</span>];</div><div class="line">        }<span class="keyword">else</span>{</div><div class="line">          matrix[i][j] = <span class="built_in">Math</span>.min(</div><div class="line">            matrix[i-<span class="number">1</span>][j]+<span class="number">1</span>, <span class="comment">//delete</span></div><div class="line">            matrix[i][j-<span class="number">1</span>]+<span class="number">1</span><span class="comment">//add</span></div><div class="line">            )</div><div class="line">        }</div><div class="line">      }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> matrix;</div><div class="line">  }</div><div class="line">  <span class="comment">// 根据diff算法，回溯matrix，得到最后结果</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">whole</span><span class="params">(arr2, arr1)</span> </span>{</div><div class="line">      <span class="keyword">var</span> matrix = ld(arr1, arr2)</div><div class="line">      <span class="keyword">var</span> n = arr1.length;</div><div class="line">      <span class="keyword">var</span> i = n;</div><div class="line">      <span class="keyword">var</span> m = arr2.length;</div><div class="line">      <span class="keyword">var</span> j = m;</div><div class="line">      <span class="keyword">var</span> edits = [];</div><div class="line">      <span class="keyword">var</span> current = matrix[i][j];</div><div class="line">      <span class="keyword">while</span>(i&gt;<span class="number">0</span> || j&gt;<span class="number">0</span>){</div><div class="line">      <span class="comment">// the last line</span></div><div class="line">        <span class="keyword">if</span> (i === <span class="number">0</span>) {</div><div class="line">          edits.unshift(<span class="number">3</span>);</div><div class="line">          j--;</div><div class="line">          <span class="keyword">continue</span>;</div><div class="line">        }</div><div class="line">        <span class="comment">// the last col</span></div><div class="line">        <span class="keyword">if</span> (j === <span class="number">0</span>) {</div><div class="line">          edits.unshift(<span class="number">2</span>);</div><div class="line">          i--;</div><div class="line">          <span class="keyword">continue</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">var</span> northWest = matrix[i - <span class="number">1</span>][j - <span class="number">1</span>];</div><div class="line">        <span class="keyword">var</span> west = matrix[i - <span class="number">1</span>][j];</div><div class="line">        <span class="keyword">var</span> north = matrix[i][j - <span class="number">1</span>];</div><div class="line"></div><div class="line">        <span class="keyword">var</span> min = <span class="built_in">Math</span>.min(north, west, northWest);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (min === west) {</div><div class="line">          edits.unshift(<span class="number">2</span>); <span class="comment">//delete</span></div><div class="line">          i--;</div><div class="line">          current = west;</div><div class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (min === northWest ) {</div><div class="line">          <span class="keyword">if</span> (northWest === current) {</div><div class="line">            edits.unshift(<span class="number">0</span>); <span class="comment">//no change</span></div><div class="line">          } <span class="keyword">else</span> {</div><div class="line">            edits.unshift(<span class="number">1</span>); <span class="comment">//update</span></div><div class="line">            current = northWest;</div><div class="line">          }</div><div class="line">          i--;</div><div class="line">          j--;</div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">          edits.unshift(<span class="number">3</span>); <span class="comment">//add</span></div><div class="line">          j--;</div><div class="line">          current = north;</div><div class="line">        }</div><div class="line">      }</div><div class="line">      <span class="keyword">var</span> LEAVE = <span class="number">0</span>;</div><div class="line">      <span class="keyword">var</span> ADD = <span class="number">3</span>;</div><div class="line">      <span class="keyword">var</span> DELELE = <span class="number">2</span>;</div><div class="line">      <span class="keyword">var</span> UPDATE = <span class="number">1</span>;</div><div class="line">      <span class="keyword">var</span> n = <span class="number">0</span>;m=<span class="number">0</span>;</div><div class="line">      <span class="keyword">var</span> steps = [];</div><div class="line">      <span class="keyword">var</span> step = {index: <span class="literal">null</span>, add:<span class="number">0</span>, removed:[]};</div><div class="line"></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i <span class="number">0</span> ){ <span class="comment">// NOT LEAVE</span></div><div class="line">          <span class="keyword">if</span>(step.index === <span class="literal">null</span>){</div><div class="line">            step.index = m;</div><div class="line">          }</div><div class="line">        } <span class="keyword">else</span> { <span class="comment">//LEAVE</span></div><div class="line">          <span class="keyword">if</span>(step.index != <span class="literal">null</span>){</div><div class="line">            steps.push(step)</div><div class="line">            step = {index: <span class="literal">null</span>, add:<span class="number">0</span>, removed:[]};</div><div class="line">          }</div><div class="line">        }</div><div class="line">        <span class="keyword">switch</span>(edits[i]){</div><div class="line">          <span class="keyword">case</span> LEAVE:</div><div class="line">            n++;</div><div class="line">            m++;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> ADD:</div><div class="line">            step.add++;</div><div class="line">            m++;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> DELELE:</div><div class="line">            step.removed.push(arr1[n])</div><div class="line">            n++;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> UPDATE:</div><div class="line">            step.add++;</div><div class="line">            step.removed.push(arr1[n])</div><div class="line">            n++;</div><div class="line">            m++;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line">      }</div><div class="line">      <span class="keyword">if</span>(step.index != <span class="literal">null</span>){</div><div class="line">        steps.push(step)</div><div class="line">      }</div><div class="line">      <span class="keyword">return</span> steps</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> whole;</div><div class="line">  })();</div></pre></td></tr></table></figure>

<h2 id="结尾">结尾</h2>
<p>对一个正常人来讲，这种程度的算法都花不了你几个小时用来学习(更别说一些更常见的算法)，<strong>关键是要有这个意识它能用来解决什么实际问题</strong>，否则对数据结构与算法倒背如流都毫无意义。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: 使用莱文斯坦距离（Levenshtein distance）计算两数组的差异<br>tags: [algorithm, javascript]<br>date: 2014-10-21 21:40:04</p>
<p>—</p>
<h2 id="前言">前言</h2>
<p><a href="http://en.wikipedia.org/wiki/Levenshtein_distance" target="_blank" rel="external">莱文斯坦距离(Levenshtein distance以下简称ld)</a>是一种常见的算法或可以称之为一种度量单位(前提是操作权重确定)，它用于表示从字串序列A到字串序列B所需要进行操作(增加、删除、更新)的综合。</p>
<p><strong>鉴于数组与字符的相似性，这个算法当然同样适合与数组</strong></p>
<p>问题是作为一个前端开发，你不好好切图，用这个算法做啥？</p>
<p>事实上<a href="https://github.com/regularjs/regular/" target="_blank" rel="external">Regularjs</a>内部就使用到了这种算法，它用于检测数组的变动差异，并将差异反映到View中(即Dom)。</p>
<p>ld算法的另一个好处是，可以容易的将计算结果映射到未来将会到来的JS ES6<a href="http://wiki.ecmascript.org/doku.php?id=harmony:observe_api_usage#array" target="_blank" rel="external">Array.observe</a>的返回值形式，方便未来的无缝迁移。</p>
]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端黑科技——纯clip-path打造的3D模型渲染器]]></title>
    <link href="http://leeluolee.github.com/2015/04/01/render-3d-use-clip-path/"/>
    <id>http://leeluolee.github.com/2015/04/01/render-3d-use-clip-path/</id>
    <published>2015-04-01T14:49:03.000Z</published>
    <updated>2015-04-07T01:27:20.000Z</updated>
    <content type="html"><![CDATA[<p><strong>⚠警告</strong>:</p>
<ul>
<li><p><em>本页DEMO只兼容到webkit浏览器(如chrome)， 请确保你的正确打开姿势</em></p>
</li>
<li><p><em>本文涉及到的资源clip3d: <a href="https://github.com/leeluolee/clip3d" target="_blank" rel="external">https://github.com/leeluolee/clip3d</a> </em></p>
</li>
<li><p><em>前戏较长， 请耐心..</em></p>
</li>
</ul>
<h2 id="缘由">缘由</h2>
<p>几天之前, 一个<a href="http://species-in-pieces.com/#" target="_blank" rel="external">species-in-pieces</a>的网站把我震到了(如下图), 出于一个<strong>优秀前端的敏锐嗅觉和原始本能</strong>，<br>我立刻祭出了看家法宝——Chrome开发者工具开始偷窥这个网站.</p>
<p><img src="http://www.species-in-pieces.com/img/assets/poster-detail-2.png" alt="species in pieces"></p>
<p>简单推敲之后，我发现其实原理可以归结为一个属性—<code>clip-path</code>, 又一篇博文的材料到手！<br>当我兴高采烈的将我的《Species in Pieces原理解析》进行到一半时，发现First blood在weibo上已经被人抢了.</p>
<a id="more"></a>
<p><img src="http://pan.zuifengyun.com/wp-content/uploads/2013/03/4437e6032a160f2a0c1523.jpg" alt="坑爹啊"></p>
<p>几乎在崩溃的同时，我突然意识这个属性其实可以用来更酷的事情, 即：</p>
<blockquote>
<p><strong>渲染3D模型</strong></p>
</blockquote>
<p>由浅入深的传统不能破，我们还是先简单来回顾下<code>clip-path</code>这个属性.</p>
<h2 id="clip-path初见">clip-path初见</h2>
<p>既然要讲<code>clip-path</code>, 我们就不得不提<code>clip</code>, 它可以选择显示一个矩形区域.</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="id">#middle</span> <span class="rules">{</span></div><div class="line">   <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">280px</span></span></span>;</div><div class="line">   <span class="rule"><span class="attribute">clip</span>:<span class="value"> <span class="function">rect</span>(<span class="number">119px</span>, <span class="number">255px</span>, <span class="number">229px</span>, <span class="number">80px</span>)</span></span>;</div><div class="line">   <span class="comment">/* standard syntax, unsupported by Internet Explorer 4-7 */</span></div><div class="line"><span class="rule">}</span></div><div class="line"></div><div class="line"><span class="id">#bottom-right</span> <span class="rules">{</span></div><div class="line">   <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">200px</span></span></span>;</div><div class="line">   <span class="rule"><span class="attribute">clip</span>:<span class="value"> <span class="function">rect</span>(<span class="number">235px</span> <span class="number">335px</span> <span class="number">345px</span> <span class="number">160px</span>)</span></span>;</div><div class="line">   <span class="comment">/* non-standard syntax, but supported by all major browsers*/</span></div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>缺陷显而易见，它只能裁剪矩形区域。这个属性目前已经被 <a href="http://www.w3.org/TR/css-masking-1/#clip-property" target="_blank" rel="external">deprecated</a>, 因为我们有了更强大的<a href="http://www.w3.org/TR/css-masking-1/#the-clip-path" target="_blank" rel="external"><code>clip-path</code></a>.</p>
<blockquote>
<p>clip-path 用来显示一个特殊的路径, 所有裁剪路径内的内容才会被显示。<br>— <a href="https://css-tricks.com/almanac/properties/c/clip/" target="_blank" rel="external">https://css-tricks.com/almanac/properties/c/clip/</a></p>
</blockquote>
<p>这个属性支持<a href="">css Shape Module Level 1</a>的图形定义, 例如(示例来自于css-trick)</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class">.cliped</span><span class="rules">{</span></div><div class="line">  <span class="comment">/* 圆 */</span></div><div class="line">  <span class="rule"><span class="attribute">clip-path</span>:<span class="value"> <span class="function">circle</span>(<span class="number">30px</span> at <span class="number">35px</span> <span class="number">35px</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/* 椭圆 */</span></div><div class="line">  <span class="rule"><span class="attribute">clip-path</span>:<span class="value"> <span class="function">ellipse</span>(<span class="number">65px</span> <span class="number">30px</span> at <span class="number">125px</span> <span class="number">40px</span>)</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>其实css和svg在很多方面有着千丝万缕的关系, <a href="http://www.w3.org/TR/2014/WD-css-masking-1-20140213/" target="_blank" rel="external">Masking Module规范</a>(clip-path隶属)基本源自于SVG. 所以支持svg的<a href="http://www.w3.org/TR/css-masking-1/#svg-clipping-paths" target="_blank" rel="external">clipPath</a>来定义裁剪图形也丝毫都不奇怪了, 如下例所示</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class">.cliped</span><span class="rules">{</span></div><div class="line">  <span class="comment">/* 本页的内联svg */</span></div><div class="line">  <span class="rule"><span class="attribute">clip-path</span>:<span class="value"> <span class="function">url</span>(<span class="hexcolor">#c1</span>)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/* 远程svg信息, c1代表的是id */</span></div><div class="line">  <span class="rule"><span class="attribute">clip-path</span>:<span class="value"> <span class="function">url</span>(path.svg<span class="hexcolor">#c1</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>对应的<code>&lt;clipPath&gt;</code>节点.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">clipPath</span> <span class="attribute">id</span>=<span class="value">"clipping"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">circle</span> <span class="attribute">cx</span>=<span class="value">"150"</span> <span class="attribute">cy</span>=<span class="value">"150"</span> <span class="attribute">r</span>=<span class="value">"50"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">rect</span> <span class="attribute">x</span>=<span class="value">"150"</span> <span class="attribute">y</span>=<span class="value">"150"</span> <span class="attribute">width</span>=<span class="value">"100"</span> <span class="attribute">height</span>=<span class="value">"100"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">clipPath</span>&gt;</span></div></pre></td></tr></table></figure>

<p>今天我们会提到的图形定义主要是多边形polygon, 这也是最为灵活的一种图形描述方式, 例如下图</p>
<p><img src="https://leeluolee.github.io/attach/2015/clip/raw.jpg" alt="/attach/2015/clip/raw.jpg"></p>
<p>利用以下代码(兼容非IE浏览器)裁剪后</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">.clip{</div><div class="line">/*Chrome,Safari*/</div><div class="line">-webkit-clip-path: polygon(647px 409px,840px 203px,619px 12px,418px 213px);</div><div class="line"></div><div class="line">/*Firefox*/</div><div class="line">clip-path: url("#clipPolygon");</div><div class="line"></div><div class="line">/* iOS support inline encoded svg file*/</div><div class="line">-webkit-mask: url(data:image/svg+xml;charset=utf-8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2ZXJzaW9uPSIxLjEiIHdpZHRoPSIwIiBoZWlnaHQ9IjAiPgogIDxjbGlwUGF0aCBpZD0ic3ZnQ2xpcCI+CiAgICA8cGF0aCBpZD0ic3ZnUGF0aCIgZD0iTTY0Nyw0MDkgTDg0MCwyMDMgNjE5LDEyIDQxOCwyMTMgeiIvPgogIDwvY2xpcFBhdGg+CiAgPHBhdGggaWQ9InN2Z01hc2siIGQ9Ik02NDcsNDA5IEw4NDAsMjAzIDYxOSwxMiA0MTgsMjEzIHoiICAvPgo8L3N2Zz4=) no-repeat;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<p><img src="https://leeluolee.github.io/attach/2015/clip/cliped.jpg" alt="/attach/2015/clip/cliped.jpg"></p>
<p>对于firefox，我们需要用<code>&lt;clipPath&gt;</code>来定义图形.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">svg</span> <span class="attribute">width</span>=<span class="value">"0"</span> <span class="attribute">height</span>=<span class="value">"0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">clipPath</span> <span class="attribute">id</span>=<span class="value">"clipPolygon"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">polygon</span> <span class="attribute">points</span>=<span class="value">"647 409,840 203,619 12,418 213"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">polygon</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">clipPath</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">svg</span>&gt;</span></div></pre></td></tr></table></figure>

<p><code>clip-path</code>完成的就是这样一个简单的工作， 但是恰恰解决了前端开发中一系列头疼的限制.</p>
<p>我们先从文章开始的《species in pieces》来剖析下<code>clip-path</code>的妙用吧.</p>
<h2 id="借《species_in_pieces》深入学习clip-path">借《species in pieces》深入学习<code>clip-path</code></h2>
<p>我们先来看下在《species in pieces》中每个动物的组成节点.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"wrap left-to-right"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"shard-wrap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"shard"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"shard-wrap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"shard"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">    .</div><div class="line">    .</div><div class="line">    省略若干30个</div><div class="line">    .</div><div class="line">    .</div><div class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"shard-wrap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"shard"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"shard-wrap"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"shard"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p>对应的部分关键css</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class">.shard-wrap</span> <span class="rules">{ <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>; <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>; <span class="rule"><span class="attribute">transition</span>:<span class="value"> .<span class="number">5s</span></span></span>; <span class="rule"><span class="attribute">z-index</span>:<span class="value"> <span class="number">2</span></span></span>; <span class="rule">}</span></span></div><div class="line"></div><div class="line"><span class="comment">/* crow 乌鸦的图形描述 */</span></div><div class="line"><span class="class">.crow</span> <span class="class">.shard-wrap</span><span class="pseudo">:nth-child(1)</span> <span class="class">.shard</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">20%</span> <span class="number">50%</span>,<span class="number">25%</span> <span class="number">52.4%</span>,<span class="number">11.5%</span> <span class="number">54.5%</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#2C323D</span></span></span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="class">.crow</span> <span class="class">.shard-wrap</span><span class="pseudo">:nth-child(2)</span> <span class="class">.shard</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">14.7%</span> <span class="number">47.5%</span>,<span class="number">35.2%</span> <span class="number">50.2%</span>,<span class="number">25%</span> <span class="number">52.5%</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#63676F</span></span></span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="class">.crow</span> <span class="class">.shard-wrap</span><span class="pseudo">:nth-child(3)</span> <span class="class">.shard</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">22.9%</span> <span class="number">44.5%</span>,<span class="number">35.2%</span> <span class="number">50.2%</span>,<span class="number">25%</span> <span class="number">48.9%</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#0F1622</span></span></span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">.</div><div class="line">.</div><div class="line">省略中间25个</div><div class="line">.</div><div class="line">.</div><div class="line">*/</div><div class="line"><span class="class">.crow</span> <span class="class">.shard-wrap</span><span class="pseudo">:nth-child(29)</span> <span class="class">.shard</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">61.7%</span> <span class="number">44.7%</span>,<span class="number">64.4%</span> <span class="number">44%</span>,<span class="number">65.1%</span> <span class="number">36.2%</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#0f1622</span></span></span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="class">.crow</span> <span class="class">.shard-wrap</span><span class="pseudo">:nth-child(30)</span> <span class="class">.shard</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">78.5%</span> <span class="number">21.5%</span>,<span class="number">76.3%</span> <span class="number">23.7%</span>,<span class="number">74.6%</span> <span class="number">22.5%</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#0f1622</span></span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>我们可以发现，每个动物其实都是由30个三角形组成的, 每个三角形就代表一对<code>.shard-wrap&gt;.shard</code>节点, 它们都是100%的宽高的盒子.所以图形完完全全是通过<code>clip-path:polygon</code>裁剪而来的.</p>
<p>以上例的<code>crow</code>乌鸦为例，所有的图形描述其实都定义在css中, 由<code>:nth-child</code>伪类选择器来控制每一块三角的形状. polygon传入了三个参数即代表三角形的 三个顶点. 这里注意到由于是百分比单位， <strong>图形天然就是响应式的, 创建的图形就像是svg图形</strong>.</p>
<p><img src="https://leeluolee.github.io/attach/2015/clip/responsive.jpg" alt="responsive"></p>
<p>另外几个关键知识点</p>
<ul>
<li><p><strong>clip-path的碰撞盒</strong></p>
<p>上面的这种绘图在体验上非常接近我们使用canvas, 但是虽然被裁减后，仿佛我们创造了其他的图形，<br>其实节点的碰撞盒(Bounding Box)仍然是原长方形, 这它仍然会和未裁剪时一样进行排版. 使得如果我们应用此项技术到游戏相关开发中时， 我们仍需要去实现一套对应的碰撞盒机制. </p>
</li>
</ul>
<ul>
<li><p><strong>clip-path区域的UI响应</strong></p>
<p>有些人可能会问， 这是否意味着，其实只是相当于: 将裁剪区域外的内容隐藏了， 而不是真正的剔除?<br>答案不完全正确, 因为<code>clip-path</code>实现了只有保留区域可以进行UI响应, 这使得裁剪图形更像是一个独立的个体<br><a href="http://codepen.io/leeluolee/pen/KwJbov" target="_blank" rel="external">【DEMO戳这里】</a></p>
</li>
</ul>
<ul>
<li><p><strong>clip-path可以触发Animation!</strong> </p>
<p>最关键的一点还没有提到的就是: 这些动物图形都是活动的, 但是这些动画并不是通过定时器去实现， 而是通过css动画!, 继续<br>深挖一下<code>crow</code>的其余css代码.</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class">.shard</span><span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">transition</span>:<span class="value"> -webkit-clip-path <span class="number">0.6s</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="comment">/* state-two 状态二 */</span></div><div class="line"><span class="class">.animal-animations-on</span><span class="class">.state-two</span> <span class="class">.crow</span> <span class="class">.wrap</span> <span class="class">.shard-wrap</span><span class="pseudo">:nth-child(1)</span> <span class="class">.shard</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">44.7%</span> <span class="number">33.5%</span>,<span class="number">65%</span> <span class="number">26.7%</span>,<span class="number">65%</span> <span class="number">36.1%</span>)</span></span></div><div class="line">}</div><div class="line"><span class="comment">/**</span></div><div class="line">.</div><div class="line">.省略若干</div><div class="line">.</div><div class="line">*/</div><div class="line"><span class="class">.animal-animations-on</span><span class="class">.state-two</span> <span class="class">.crow</span> <span class="class">.wrap</span> <span class="class">.shard-wrap</span><span class="pseudo">:nth-child(30)</span> <span class="class">.shard</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">82.5%</span> <span class="number">26.5%</span>,<span class="number">80.3%</span> <span class="number">28.7%</span>,<span class="number">78.6%</span> <span class="number">27.5%</span>)</span></span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">/* state-three 状态三 */</span></div><div class="line"><span class="class">.animal-animations-on</span><span class="class">.state-two</span> <span class="class">.crow</span> <span class="class">.wrap</span> <span class="class">.shard-wrap</span><span class="pseudo">:nth-child(1)</span> <span class="class">.shard</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">86.57%</span> <span class="number">33.5%</span>,<span class="number">63.44%</span> <span class="number">56%</span>,<span class="number">65%</span> <span class="number">36.4%</span>)</span></span></div><div class="line">}</div><div class="line"><span class="comment">/**</span></div><div class="line">.</div><div class="line">.省略若干</div><div class="line">.</div><div class="line">*/</div><div class="line"><span class="class">.animal-animations-on</span><span class="class">.state-two</span> <span class="class">.crow</span> <span class="class">.wrap</span> <span class="class">.shard-wrap</span><span class="pseudo">:nth-child(30)</span> <span class="class">.shard</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> <span class="function">polygon</span>(<span class="number">44.7%</span> <span class="number">34.5%</span>,<span class="number">65%</span> <span class="number">28.7%</span>,<span class="number">65%</span> <span class="number">36.1%</span>)</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>  我们会发现每种动物的各阶段造型都由父节点<code>.animal-animations-on</code>的全局类名<code>state-x</code>来控制, 这种方式能凑效的根本原因是:<br>  <strong>动画在一定条件下可以对<code>clip-path</code>生效</strong> . 这里的一定条件即:  <strong>裁剪的多边形必须具有相同的顶点数</strong>, 这其实也符合常理, 浏览器怎么知道你如何从三角形变换到四边形呢？</p>
<p>  <a href="http://codepen.io/leeluolee/pen/EazNjL" target="_blank" rel="external">【DEMO: 满足条件的clip-path可以响应动画】</a></p>
<p>  这里我们的第二个图形里， 将三角形也使用四个顶点来生成， 这样可以使得变换为四边形的时候可以进行动画。</p>
<h3 id="pip小节">pip<strong>小节</strong></h3>
<p>《pecies in pieces》中那些些栩栩如生的动物拼图并没有蕴含什么复杂的技术问题， 微博的<a href="http://weibo.com/u/1820450311" target="_blank" rel="external">@周文彬1986</a>同学将部分形状数据提取了出来<br>，只利用了几行sass代码就实现了<a href="http://codepen.io/zhouwenbin/pen/RNEJjj" target="_blank" rel="external">简化效果</a>. 所以这无论如何都称不上是一个技术性突破, <strong>而是一个100%的充满灵感的图形和动效设计的典范</strong>， 有时还是不禁会唏嘘为什么我们想不到这种创意.</p>
<p>不过虽然在设计灵感上与别人相去甚远， 我们还可以在技术层面来进行不同的尝试. 比如, 完全利用<code>clip-path</code>实现一个3D模型的渲染器.</p>
<h2 id="使用clip-path属性实现3D模型渲染器-">使用clip-path属性实现3D模型渲染器.</h2>
<p>这节我不会对所谓的计算机图形学做深入的探讨, 这是因为:</p>
<blockquote>
<p>懂它的肯定比我懂，不懂的我也没法在一篇博文里解释清楚.</p>
</blockquote>
<p>所以接下来的原理简要不会涉及到<strong>任意公式推导</strong>, 有兴趣的可以参考下<a href="https://github.com/leeluolee/clip3d" target="_blank" rel="external">clip3d的源码部分</a>. </p>
<p>我们先来看个简单的例子:</p>
<p><a href="http://codepen.io/leeluolee/full/xbedLe/" target="_blank" rel="external"><img src="https://raw.githubusercontent.com/leeluolee/clip3d/master/assets/snapshot.gif" alt="">`</a></p>
<p><a href="">【DEMO】</a></p>
<p>通过DEMO， 我们会发现实际上它不涉及css用于变换的transform内容, 那它是怎么实现的呢？</p>
<h3 id="3维坐标系">3维坐标系</h3>
<p>既然是3d图形， 当然在3维空间内会有一个唯一的定义， 就比如下图的Ag点， 它由x坐标、y坐标与z坐标组成.</p>
<p><em>事实上，在进行矩阵计算时,是四维齐次坐标</em></p>
<p><img src="https://leeluolee.github.io/attach/2015/clip/3d.jpg" alt="/attach/2015/clip/3d.jpg"></p>
<p>但是问题来了， 我们的窗口只能显示2维平面图形, 如何实现3D展示? </p>
<p>答案就是利用视觉透视原理的投影变换.</p>
<h3 id="投影">投影</h3>
<p>天生的，我们对物体的直观感受是近大远小, 当我们将这种特性应用到二维绘图时， 它就具有真实自然的三维立体形态.</p>
<p><img src="http://www.57-edu.com/uploads/140307/14-14030G20330646.JPG" alt="透视"></p>
<p><em>小插曲: 在google搜索“透视”的图片时，我惊呆了</em></p>
<p>透视投影与连续放映的图片由于视觉暂留效果看起来像是活动的一样， 都一种“视觉欺骗”.</p>
<p>从3D图形映射到我们的二维平面就称之为“投影”.</p>
<p><a name="pic3"></a><br><img src="http://xieguanglei.com/post/model-view-projection-matrix/images/mvp-matrix.jpg" alt="图3"></p>
<p><strong>空间变换</strong></p>
<p>以上图为例, 在三维空间的三角形到最终投影到屏幕中, 会先经过两次坐标系变换. </p>
<ol>
<li>物体空间到全局空间的空间转换, 如图中的L空间 -&gt; G空间</li>
<li>全局空间到摄像机空间(eye为原点的齐次空间)的空间转换, 如G空间 -&gt;  V空间</li>
</ol>
<p>比如局部空间的顶点(1, 0, 0)到了全局空间可能就是(0, 1, 0), 这种变换都是通过矩阵运算来实现的.</p>
<p>当然你完全可以省去这两个步骤, 直接将模型定义在摄像机空间, 但是这样不利于模型的通用性, 事实上在复杂场景下， 从局部空间到全局空间往往需要多次变换.</p>
<p><strong>投影变换</strong></p>
<p>接下来就是摄像机空间到裁剪空间的投影变换了. 熟悉OpenGL的同学可能了解这个正是glPerspective和glFrustum所做的工作.</p>
<p>刚才<a href="#pic3">图3</a>中， 其实还定义了一个四棱台， 这个称之为“视椎体”, 它定义摄像机的最大可视距离, 最小可视距离(一般为投影面)以及可视角度, 只有在这个视锥体之内的物品是可以被显示的, 否则将会被剔除(或裁减).</p>
<p>投影变换实际上也是一次空间变换， 它将视锥体内的点映射到了标准化的立方体内(如图4), 坐标范围从<code>[-1, -1, -1]</code> 到 <code>[1, 1, 1]</code>, 所有经过映射点如果落在立方体之外即代表它在视锥体之外.</p>
<p><img src="http://xieguanglei.com/post/model-view-projection-matrix/images/ccv.jpg" alt="/attach/2015/clip/axis.png"></p>
<p>这么做带来的最终结果是： 近大远小的视锥体，变成了等宽等长的立方体。 这样所有标准体内的节点到投影面都是等值投影(不需要做近大远小处理)。</p>
<p>理论上我们只要将各个面包含的顶点的[x,y]坐标连接起来并填充成面，就可以完成物体的渲染了！ 实际上推广到Web前端实现， 我们还需要多做一步， 那就是:</p>
<p><strong>荧幕坐标系到窗口坐标系的转换</strong></p>
<p>经过投影矩阵变换后， x/y轴的范围是[-1, 1]. z轴为[-1, 1]. 假设我们最终获得的某个三角形顶点位置为分别是<code>[-0.2, 0.3, 0.5]</code> ，<code>[0.2, -0.3, 0.1]</code> 和 <code>[0.5, 0.5, 0.3]</code>. 但由于中心点和坐标轴方向与Web浏览器的定义都完全不同， 如下图所示.</p>
<p><img src="https://leeluolee.github.io/attach/2015/clip/axis.png" alt="/attach/2015/clip/axis.png"></p>
<p>我们需要将x,y坐标修正到与窗口坐标系匹配.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x<span class="escape">` </span>= <span class="number">0.5</span> - x</div><div class="line">y<span class="escape">` </span>= <span class="number">0.5</span> - y</div></pre></td></tr></table></figure>

<p>即三个顶点分别为<code>[0.7, 0.2, 0.5]</code>、<code>[0.3, 0.8, 0.1]</code>和<code>[0, 0, 0.3]</code>, 为避免计算, 我们换算到百分比坐标并取其x,y坐标利用<code>clip-path</code>渲染出对应的平面图形.</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class">.face1</span><span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-clip-path</span>:<span class="value"> (<span class="number">70%</span> <span class="number">20%</span>, <span class="number">30%</span> <span class="number">80%</span>, <span class="number">0%</span> <span class="number">0%</span>)</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>由于平面图形符合透视常识， 所以在视觉上你会感觉到这是个3D图形.</p>
<h3 id="锦上添花-">锦上添花.</h3>
<p><strong>z-sorting</strong></p>
<p>其实我们发现，经过投影变换后， 得到的坐标是有z分量的, 它正是用来帮助我们处理3D下两个面“谁前谁后的问题”. 由于实现方案的天然限制, 我们是无法实现像素级的Z深度缓存的, 但是我们可以利用<code>z-index</code>来实现一个山寨的z-sorting, 我们首先记录一个面的平均深度(三顶点), 然后直接将其取负作为节点的<code>z-index</code>值就完成了深度排序了</p>
<p><strong>背面剔除与光照</strong></p>
<p>背面剔除与光照分别利用平面法线与观察方向和光线投射方向有关， 一些简单的三角函数+向量点积计算和色值混合操作， 这里我们就不再多做说明. 简单起见， 光源这里只处理为平行无限远的光源， 而背面剔除我们仅仅只是<code>display:none</code>而已</p>
<h3 id="clip小节">clip小节</h3>
<p>使用<code>clip-path</code>尝试渲染3D 模型其实在绘图部分与之前的《pecies in pieces》并没有本质的不同: </p>
<p><strong>它们都是由三角形组成的图形, 并且每个三角形是由div和clip-path实现的</strong>. 但是由于引入了透视投影, 使得<code>clip-path</code>有了渲染3D模型的能力。</p>
<h2 id="别逗我了，css3不是早有transform_3d吗！">别逗我了，css3不是早有transform 3d吗！</h2>
<p>是的， 上面那个例子其实可以使用transform更简单的解决， 以正方体为例.</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class">.back</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateZ</span>(-<span class="number">100px</span>) <span class="function">rotateY</span>(<span class="number">180deg</span>)</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.right</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotateY</span>(-<span class="number">270deg</span>) <span class="function">translateX</span>(<span class="number">100px</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> top right</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.left</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotateY</span>(<span class="number">270deg</span>) <span class="function">translateX</span>(-<span class="number">100px</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> center left</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.top</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotateX</span>(-<span class="number">90deg</span>) <span class="function">translateY</span>(-<span class="number">100px</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> top center</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.bottom</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotateX</span>(<span class="number">90deg</span>) <span class="function">translateY</span>(<span class="number">100px</span>)</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> bottom center</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.front</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateZ</span>(<span class="number">100px</span>)</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>五面体的例子稍微复杂一点, 但仍然可以做， 即使用<a href="http://www.zhangxinxu.com/wordpress/2010/05/css-border%E4%B8%89%E8%A7%92%E3%80%81%E5%9C%86%E8%A7%92%E5%9B%BE%E5%BD%A2%E7%94%9F%E6%88%90%E6%8A%80%E6%9C%AF%E7%AE%80%E4%BB%8B/" target="_blank" rel="external">border来模拟出我们的三角形</a>.</p>
<p>但是如果是下面这种例子呢？<code>transform</code>就束手无策了, <strong><a href="http://codepen.io/leeluolee/full/zxQqpm/" target="_blank" rel="external">【DEMO戳这里】</a></strong></p>
<p><img src="http://ww4.sinaimg.cn/large/6252205cgw1eqmyg50fsjg208e0a44mf.gif" alt="复杂图形"></p>
<p>最关键的问题就是, 由于上文所提到的例子在流程上与常规意义上的3d渲染一致的，我们可以使用类似的数据模型来渲染图形。 而transform是以面为基础的， 有着天然的劣势。</p>
<p>例如DEMO1的数据其实来自于著名的<a href="http://learningwebgl.com/blog/?page_id=1217" target="_blank" rel="external">learningWebGL</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Render = clip3d.Render,</div><div class="line">  Light = clip3d.Light,</div><div class="line">  Camera = clip3d.Camera,</div><div class="line">  vec3 = clip3d.vec3,</div><div class="line">  mat4 = clip3d.mat4,</div><div class="line">  _ = clip3d.util,</div><div class="line">  color = clip3d.color;</div><div class="line"></div><div class="line"><span class="keyword">var</span> render = <span class="keyword">new</span> Render({</div><div class="line">  parent: <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>),</div><div class="line">  camera: <span class="keyword">new</span> Camera({</div><div class="line">    eye: [<span class="number">4</span>,<span class="number">4</span>, -<span class="number">10</span>]</div><div class="line">  }),</div><div class="line">  <span class="comment">// simple point-lighting</span></div><div class="line">  light: <span class="keyword">new</span> Light({</div><div class="line">    position: [ <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span> ],</div><div class="line">    color: [<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,<span class="number">1</span>]</div><div class="line">  }),</div><div class="line">  <span class="comment">// http://learningwebgl.com/blog/?p=370</span></div><div class="line">  <span class="comment">// entity form learning webgl</span></div><div class="line">  entities: [</div><div class="line">    {</div><div class="line">      vertices: [</div><div class="line">        <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">0</span>,</div><div class="line">        -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>,</div><div class="line">        <span class="number">1</span>, -<span class="number">1</span>,  <span class="number">1</span>,</div><div class="line"></div><div class="line">        <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">0</span>,</div><div class="line">        <span class="number">1</span>, -<span class="number">1</span>,  <span class="number">1</span>,</div><div class="line">        <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</div><div class="line"></div><div class="line">        <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">0</span>,</div><div class="line">        <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</div><div class="line">        -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</div><div class="line"></div><div class="line">        <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">0</span>,</div><div class="line">        -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</div><div class="line">        -<span class="number">1</span>, -<span class="number">1</span>,  <span class="number">1</span>,</div><div class="line"></div><div class="line">        <span class="comment">// warning the squence</span></div><div class="line">        <span class="number">1</span>, -<span class="number">1</span>,  <span class="number">1</span>,</div><div class="line">        -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>,</div><div class="line">        -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</div><div class="line"></div><div class="line">        <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</div><div class="line">        <span class="number">1</span>, -<span class="number">1</span>,  <span class="number">1</span>,</div><div class="line">        -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>,</div><div class="line"></div><div class="line">      ],</div><div class="line">      colors: [</div><div class="line">      ]</div><div class="line">    },</div><div class="line">    {</div><div class="line">      vertices: [</div><div class="line">  <span class="comment">// Front face</span></div><div class="line">      -<span class="number">1.0</span>, -<span class="number">1.0</span>,  <span class="number">1.0</span>,</div><div class="line">       <span class="number">1.0</span>, -<span class="number">1.0</span>,  <span class="number">1.0</span>,</div><div class="line">       <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,</div><div class="line">      -<span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,</div><div class="line"></div><div class="line">      <span class="comment">// Back face</span></div><div class="line">      -<span class="number">1.0</span>, -<span class="number">1.0</span>, -<span class="number">1.0</span>,</div><div class="line">      -<span class="number">1.0</span>,  <span class="number">1.0</span>, -<span class="number">1.0</span>,</div><div class="line">       <span class="number">1.0</span>,  <span class="number">1.0</span>, -<span class="number">1.0</span>,</div><div class="line">       <span class="number">1.0</span>, -<span class="number">1.0</span>, -<span class="number">1.0</span>,</div><div class="line"></div><div class="line">      <span class="comment">// Top face</span></div><div class="line">      -<span class="number">1.0</span>,  <span class="number">1.0</span>, -<span class="number">1.0</span>,</div><div class="line">      -<span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,</div><div class="line">       <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,</div><div class="line">       <span class="number">1.0</span>,  <span class="number">1.0</span>, -<span class="number">1.0</span>,</div><div class="line"></div><div class="line">      <span class="comment">// Bottom face</span></div><div class="line">      -<span class="number">1.0</span>, -<span class="number">1.0</span>, -<span class="number">1.0</span>,</div><div class="line">       <span class="number">1.0</span>, -<span class="number">1.0</span>, -<span class="number">1.0</span>,</div><div class="line">       <span class="number">1.0</span>, -<span class="number">1.0</span>,  <span class="number">1.0</span>,</div><div class="line">      -<span class="number">1.0</span>, -<span class="number">1.0</span>,  <span class="number">1.0</span>,</div><div class="line"></div><div class="line">      <span class="comment">// Right face</span></div><div class="line">       <span class="number">1.0</span>, -<span class="number">1.0</span>, -<span class="number">1.0</span>,</div><div class="line">       <span class="number">1.0</span>,  <span class="number">1.0</span>, -<span class="number">1.0</span>,</div><div class="line">       <span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,</div><div class="line">       <span class="number">1.0</span>, -<span class="number">1.0</span>,  <span class="number">1.0</span>,</div><div class="line"></div><div class="line">      <span class="comment">// Left face</span></div><div class="line">      -<span class="number">1.0</span>, -<span class="number">1.0</span>, -<span class="number">1.0</span>,</div><div class="line">      -<span class="number">1.0</span>, -<span class="number">1.0</span>,  <span class="number">1.0</span>,</div><div class="line">      -<span class="number">1.0</span>,  <span class="number">1.0</span>,  <span class="number">1.0</span>,</div><div class="line">      -<span class="number">1.0</span>,  <span class="number">1.0</span>, -<span class="number">1.0</span></div><div class="line">      ],</div><div class="line">      indices : [</div><div class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,      <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>,    <span class="comment">// Front face</span></div><div class="line">        <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,      <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>,    <span class="comment">// Back face</span></div><div class="line">        <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>,     <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>,  <span class="comment">// Top face</span></div><div class="line">        <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>,   <span class="number">12</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="comment">// Bottom face</span></div><div class="line">        <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>,   <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="comment">// Right face</span></div><div class="line">        <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>,   <span class="number">20</span>, <span class="number">22</span>, <span class="number">23</span>  <span class="comment">// Left face</span></div><div class="line">      ],</div><div class="line">      itemSize: <span class="number">3</span>,</div><div class="line">      <span class="comment">// for simplify. one face only have one color</span></div><div class="line">      colors: [</div><div class="line">        [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">255</span>, <span class="number">120</span> , <span class="number">255</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">255</span>, <span class="number">120</span> , <span class="number">255</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">120</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">120</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">255</span>, <span class="number">120</span>, <span class="number">1</span>],</div><div class="line">        [<span class="number">0</span>, <span class="number">255</span>, <span class="number">120</span>, <span class="number">1</span>]</div><div class="line">      ],</div><div class="line">      matrix: mat4.createRotate([<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>], <span class="number">30</span>)</div><div class="line">    }</div><div class="line">  ]</div><div class="line">})</div></pre></td></tr></table></figure>

<p>即一套模型数据可以应用于不同的环境， 只要我们使用标准化的Render即可， 这是transform所替代不了的</p>
<h3 id="clip3d的限制"><a href="https://github.com/leeluolee/clip3d" target="_blank" rel="external">clip3d</a>的限制</h3>
<ul>
<li>无法引入材质： 这点几乎判了这个clip-path的死刑了, 并且z-sorting是基于面的z-index, 是是有可能出现bug的</li>
<li>性能: 超过1000个面在动画时就有了明显的卡顿</li>
<li>浏览器支持度不佳: 比canvas更差</li>
</ul>
<h2 id="后记">后记</h2>
<p>聪明的朋友可能发现了， 本文其实只是一次3D pipeline操作的简单实现, 关键点其实就是”任意多边形”的渲染能力, 而<code>clip-path</code>恰恰是将我们从只能渲染长方形的尴尬境地中解放了出来，使得Web设计实现上有了更大的可能性.</p>
<p>同理可证前端还有这些平台可以实现这种级别的渲染器. </p>
<ol>
<li>canvas/2d</li>
<li>canvas/webgl</li>
<li>svg </li>
<li>快死的vml,flash</li>
</ol>
<p>所有的代码都放在<a href="https://github.com/leeluolee/clip3d" target="_blank" rel="external">github: clip3d</a>中， 有兴趣的可以关注一下。</p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>⚠警告</strong>:</p>
<ul>
<li><p><em>本页DEMO只兼容到webkit浏览器(如chrome)， 请确保你的正确打开姿势</em></p>
</li>
<li><p><em>本文涉及到的资源clip3d: <a href="https://github.com/leeluolee/clip3d" target="_blank" rel="external">https://github.com/leeluolee/clip3d</a> </em></p>
</li>
<li><p><em>前戏较长， 请耐心..</em></p>
</li>
</ul>
<h2 id="缘由">缘由</h2>
<p>几天之前, 一个<a href="http://species-in-pieces.com/#" target="_blank" rel="external">species-in-pieces</a>的网站把我震到了(如下图), 出于一个<strong>优秀前端的敏锐嗅觉和原始本能</strong>，<br>我立刻祭出了看家法宝——Chrome开发者工具开始偷窥这个网站.</p>
<p><img src="http://www.species-in-pieces.com/img/assets/poster-detail-2.png" alt="species in pieces"></p>
<p>简单推敲之后，我发现其实原理可以归结为一个属性—<code>clip-path</code>, 又一篇博文的材料到手！<br>当我兴高采烈的将我的《Species in Pieces原理解析》进行到一半时，发现First blood在weibo上已经被人抢了.</p>
]]>
    
    </summary>
    
      <category term="3d" scheme="http://leeluolee.github.com/tags/3d/"/>
    
      <category term="javascript" scheme="http://leeluolee.github.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你不知道的终端Terminl]]></title>
    <link href="http://leeluolee.github.com/2014/11/04/you-dont-know-terminal/"/>
    <id>http://leeluolee.github.com/2014/11/04/you-dont-know-terminal/</id>
    <published>2014-11-04T01:57:11.000Z</published>
    <updated>2015-04-06T13:59:36.000Z</updated>
    <content type="html"><![CDATA[<p>以下内容大部分源自 <strong><code>man console_codes</code></strong></p>
<h3 id="关于转移字符">关于转移字符</h3>
<p>首先废话下转移字符，因为后面介绍到CSI等部分时会涉及到.</p>
<ol>
<li>八进制: “\” + 1~3位的8位数字 例如 “\123”;</li>
<li>16进制长 “\u” + 4位16位数字  例如 “\u738b” (王).<br>数字即 <code>char.charCodeAt(0).toString(16)</code>的值</li>
<li>16进制短 “\x” + 两位16位数字 例如 “\x55”(U) 它等价于 “\u0055”;</li>
<li>其它诸如<code>\t</code>等制表符 等就不再做说明了</li>
</ol>
<h3 id="终端的control_codes">终端的control codes</h3>
<p>比如Linux的终端实现了VT102(<a href="http://en.wikipedia.org/wiki/VT100" target="_blank" rel="external">?</a>)和ECMA-48的，以及一些私有字符集。</p>
<p>看到VT102 terminal实体可能你就明白为何我们称之为“终端”. 对，就是这大家伙<br><img src="http://terminals.classiccmp.org/wiki/images/thumb/d/d0/DEC_VT102_291060983768-1.jpg/800px-DEC_VT102_291060983768-1.jpg" alt="VT102"></p>
<p>VT102 被称之为 De facto standard, 即虽然没有相关标准化，但是已然成为了一种事实标准，<br>我们常规Linux的终端就是模拟实现了它的接口标准</p>
<p>当你输入字符时，如果终端判断其为一个控制字符或正处于一个，它不会将其转换为字符实体并显示，<br>而是会发生一些特殊的处理，比如改变字体颜色，上下移动光标隐藏光标，发出蜂鸣声等等。</p>
<h2 id="控制字符_(Control_characters)_与转移序列">控制字符 (Control characters) 与转移序列</h2>
<p>有以下控制字符</p>
<ul>
<li>00(NUL)</li>
<li>07(BEL)</li>
<li>08(BS)</li>
<li>09(HT)</li>
<li>0a(LF)</li>
<li>0b(VT)</li>
<li>0c(FF)</li>
<li>0d(CR)</li>
<li>0e(SO)</li>
<li>0f(SI)</li>
<li>18(CAN)</li>
<li>1a(SUB)</li>
<li><strong>1b(ESC)</strong></li>
<li>7f(DEL)</li>
</ul>
<p>事实上我们平时term-dom中使用到的只有ESC转义起始符(以及用来蜂鸣的<code>\x07</code> BEL);</p>
<p>控制字符会立即生效并且不会被显示, 如果前面的序列正处于CSI阶段，CSI会在生效后继续进行,<br>唯一的例外是ESC控制符, 它会终止当前的CSI序列</p>
<h3 id="ESC">ESC</h3>
<p>ESC控制符是我们最常用的</p>
<p>ESC c    RIS    重绘屏幕.<br>ESC D    IND    换行.<br>ESC E    NEL    新的一行.<br>ESC H    HTS    设置当前列为制表位.<br>ESC M    RI    翻转换行(Reverse linefeed).<br>ESC Z    DECID    DEC 私有定义.内核将其解释为<br>        VT102字符,返回字符ESC [ ? 6 c.<br>ESC 7    DECSC    存储当前状态(光标坐标,<br>        属性,字符集).<br>ESC 8    DECRC    恢复上一次储存的设置<br>ESC [    CSI    控制序列介绍<br>ESC %        开始一个字符集选择序列<br>ESC % @        \0\0\0选择默认字符集(ISO 646 / ISO 8859-1)<br>ESC % G        \0\0\0选择 UTF-8<br>ESC % 8        \0\0\0选择 UTF-8(已不用)<br>ESC # 8    DECALN    DEC 屏幕校准测试 - 以E’s填充屏幕.<br>ESC(        开始一个 G0 字符集定义序列<br>ESC( B        \0\0\0选择默认字符集(ISO 8859-1 mapping)<br>ESC( 0        \0\0\0选择 vt100 图形映射<br>ESC( U        \0\0\0选择空映射 - 直接访问字符ROM<br>ESC( K        \0\0\0选择用户映射 -  由程序\fBmapscrn\fP(8)<br>        \0\0\0加载.<br>ESC )        开始一个 G1 字符集定义<br>        (后面跟 B,0,U,K,同上).<br>ESC &gt;    DECPNM    设置数字小键盘模式<br>ESC =    DECPAM    设置程序键盘模式<br>ESC ]    OSC    (是perating system command的缩写)<br>ESC ] P Inrrggbb P: 设置调色板,后面紧跟7个<br>十六进制数,再跟一个 P :-(.<br>这里 \fIn\fP 是颜色(0-16),而 \fIrrggbb\fP 表示<br>红/绿/蓝 值(0-255).<br>ESC ] R: 重置调色板</p>
<p>这里的部分序列是term-dom中需要的</p>
<h3 id="CSI">CSI</h3>
<p>CSI(<code>ESC [</code>) 是由分号隔开的十进制数.空参数或缺少的参数以0处理.<br>可以用一个问号代替参数序列.</p>
<p>CSI可以实现一些文字效果，比如term-dom大部分实现都基于CSI来实现文件颜色，背景色等</p>
<p>CSI序列的动作由最后一个数字决定</p>
<p>那么问题来了，我只是想换个文字颜色你和我扯那么多干嘛？</p>
<p>1</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>以下内容大部分源自 <strong><code>man console_codes</code></strong></p>
<h3 id="关于转移字符">关于转移字符</h3>
<p>首先废话下转移字符，因为后面介绍到CSI等部分时会涉及到.</p>
<ol>
<li>八]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[超简单工具puer——“低碳”的前后端分离开发]]></title>
    <link href="http://leeluolee.github.com/2014/10/24/use-puer-helpus-developer-frontend/"/>
    <id>http://leeluolee.github.com/2014/10/24/use-puer-helpus-developer-frontend/</id>
    <published>2014-10-24T08:39:51.000Z</published>
    <updated>2015-04-06T13:59:36.000Z</updated>
    <content type="html"><![CDATA[<p>前几天，跟一同事(<a href="http://www.mihtool.com/" target="_blank" rel="external">MIHTool</a>作者)讨教了一下开发调试工具。其实个人觉得相较于定制一个类似MIHTool的Hybrid App容器，基于长连的B/S架构的工具其实会是一个更轻量的解决方案。此文会分享一下超简单工具<a href="http://github.com/leeluolee/puer" target="_blank" rel="external">puer</a>，以及如何利用它在产品开发的各阶段实现高效的开发。</p>
<p>本文title有点大哈，相较于目前国内正流行起来的前端后移的前后端分离方案，本文介绍是一种“低碳”的版本，所以不要纠结于这个Title的正确性哈。</p>
<a id="more"></a>
<hr>
<h2 id="简介">简介</h2>
<p>简而言之，<strong>Puer是一个可以实时编辑刷新的前端服务器</strong>。特性一览:</p>
<ul>
<li>提供一个当前或指定路径的静态服务器</li>
<li>所有浏览器的实时刷新：编辑css实时更新(update)页面样式，其它文件则重载(reload)页面</li>
<li>提供简单熟悉的mock请求的配置功能，并且配置也是自动更新。</li>
<li>可用作代理服务器，调试开发既有服务器的页面，可与mock功能配合使用</li>
<li>集成了<a href="http://people.apache.org/~pmuellr/weinre-docs/latest/" target="_blank" rel="external"><strong>weinre</strong></a>，并提供二维码地址，方便移动端的调试</li>
<li>可以作为connect中间件使用(前提是后端为nodejs，否则请使用代理模式)</li>
</ul>
<p>可以发现这里功能并不多，但罗列的基本都是实际前端开发中会涉及到的。可能敏锐的朋友会点出，同类的<a href="https://github.com/shakyShane/browser-sync" target="_blank" rel="external">browser-sync</a>提供了更强的操作同步的功能。这点其实主要不想去盲目攀比功能(实现其实并不难，因为基础的注入脚本已经做了，剩下的都只是功能堆砌)，目前的出发点都是作者实际的需求(好吧，其实是懒)。还有就是，其实<strong>puer诞生比它要早一年多</strong>。</p>
<h2 id="让我们开始使用吧">让我们开始使用吧</h2>
<h3 id="安装">安装</h3>
<p>确保你安装了<a href="http://nodejs.org/download/" target="_blank" rel="external">nodejs</a>（现在还有没nodejs环境的前端？ 拖出去喂狗吧）</p>
<p>使用npm全局安装<code>puer</code>命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> puer -g</span></div></pre></td></tr></table></figure>

<p>输入<code>puer -h</code>可以查看Help</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Usage:	puer [options...]</div><div class="line"></div><div class="line">Options:</div><div class="line">  -<span class="ruby">p,--port 	server<span class="string">'s listen port, 8000 default</span></span></div><div class="line">  -<span class="ruby">f,--filetype 	fileType to watch(split with <span class="string">'|'</span>), defualt <span class="string">'js|css|html|xhtml'</span></span></div><div class="line">  -<span class="ruby">d,--dir 	your customer working dir. default current dir</span></div><div class="line">  -<span class="ruby">i,--inspect   	start weinre server <span class="keyword">and</span> debug all puer page</span></div><div class="line">  -<span class="ruby">x,--exclude   	exclude file under watching(must be a regexp), <span class="symbol">default:</span> <span class="string">''</span></span></div><div class="line">  -<span class="ruby">a,--addon 	your addon<span class="string">'s path</span></span></div><div class="line">  -<span class="ruby">t,--target 	proxy url</span></div><div class="line">     -<span class="ruby">-no-reload   	close  auto-reload feature,(<span class="keyword">not</span> recommended)</span></div><div class="line">     -<span class="ruby">-no-launch   	close the auto launch feature</span></div><div class="line">  -<span class="ruby">h,--help   	help list</span></div></pre></td></tr></table></figure>

<p>强烈中文即时感的英语相信和大家交流起来不会很困难。</p>
<p><strong>使用</strong></p>
<p>90%的使用场景下</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /path/<span class="keyword">to</span>/workspace ↵</div><div class="line">puer ↵</div></pre></td></tr></table></figure>

<p>puer会默认为你打开<a href="http://localhost:8000页面(端口可以" target="_blank" rel="external">http://localhost:8000页面(端口可以</a> <code>-p 8001</code>参数进行控制)，并贴心的帮你列出了所有你本地可用的ip以及当前的地址二维码，方便手机访问。</p>
<p>编辑当前路径下的文件，会实时更新页面(无论你在多少台电脑打开多少个页面)。</p>
<p><img src="http://leeluolee.github.io/attach/2014-10/puer-step-1.gif" alt="puer使用1"></p>
<p>关于如何命令行下快速到达工作目录，作者推荐两个工具</p>
<ol>
<li><a href="https://github.com/rupa/z" target="_blank" rel="external">z</a>: 必装shell工具，快速进入最常用目录</li>
<li><a href="http://wbond.net/sublime_packages/terminal" target="_blank" rel="external">sublime-terminal</a>: 直接进入当前文件或工程的所在路径</li>
</ol>
<p>在开发静态页面时，这个简单的功能意义非凡，特别是双屏的时候，可以完全解放你的F5键。关键是：</p>
<blockquote>
<p>保存后看到浏览器同步刷新，有种莫名的愉悦感涌上心头有木有？</p>
</blockquote>
<p>作者简单将这种现象归结于之前看到的一篇文章：【人无法在两种思维模式下进行高效切换】，猜想这可能这和CPU的进程切换是一样一样的。</p>
<h3 id="进阶1_mock请求">进阶1 mock请求</h3>
<p>假设你的静态页面开发到一定程度，需要与服务器端交互了，而后台服务还完全无法联调，这其实是属于最简单的<strong>前后端分离开发</strong>的场景。一般而言， 作者会通过以下几种方案。</p>
<p><strong>层级1: 通过代码解耦，直接在前端mock数据</strong></p>
<p>这种方式影响较大，而且无论你解耦的如何，都会增加最终上真实环境的切换成本。</p>
<p><strong>层级2: 通过fiddler等调试代理工具mock数据</strong></p>
<p>优点是到正式环境的切换成本小，但<strong>配置成本较大</strong>，也接口mock也有局限性并基本上只能是静态数据模拟。</p>
<p><strong>层级3：利用puer无痛的解决这个问题</strong></p>
<p>puer提供了叫插件(addon)的功能，集成了express的route.js来达到最简的路由配置，可以提供基于真实http请求与相应的动态的mock数据。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">puer <span class="operator">-a</span> route.js</div></pre></td></tr></table></figure>

<p>route.js 这么写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// use addon to mock http request</span></div><div class="line"><span class="built_in">module</span>.exports = {</div><div class="line">  <span class="comment">// GET</span></div><div class="line">  <span class="string">"GET /v1/posts/:id"</span>: <span class="function"><span class="keyword">function</span><span class="params">(req, res, next)</span></span>{</div><div class="line">	<span class="comment">// response json format</span></div><div class="line">    res.send({</div><div class="line">      title: <span class="string">"title changed"</span>,</div><div class="line">      content: <span class="string">"tow post hahahah"</span></div><div class="line">    })</div><div class="line"></div><div class="line">  },</div><div class="line">  <span class="comment">// PUT POST DELETE is the same</span></div><div class="line">  <span class="string">"PUT /v1/posts/:id"</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line"></div><div class="line">  },</div><div class="line">  <span class="string">"POST /v1/posts"</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line"></div><div class="line">  },</div><div class="line">  <span class="string">"DELETE /v1/posts/:id"</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line"></div><div class="line">  }</div><div class="line">}%</div></pre></td></tr></table></figure>

<p>它其实就是一段nodejs程序，输出是一配置对象，key的空格前代表的是请求Method，后半部分是请求路径，而value代表回调函数和express的路由中间件是一致的，传入的request和response对象，相较于原生的提供了一些额外方法，不了解的也可以<a href="http://expressjs.com/3x/api.html#req.params" target="_blank" rel="external">戳这里</a></p>
<p><strong>【<a href="http://leeluolee.github.io/attach/2014-10/puer-step-2.gif" target="blank">戳这里看演示GIF</a>】</strong></p>
<p>通过演示其实你可以发现，编辑route.js后，这份配置脚本是动态更新的，免去了你一次次重启服务器的工作。</p>
<h3 id="进阶2：使用代理模式，应用puer到以有服务器中">进阶2：使用代理模式，应用puer到以有服务器中</h3>
<p>开发进行到一定阶段，一般后端服务就逐步进入了，静态页面的开发不再适用。到这个时候，我们可以使用<code>--target path</code>切换到代理模式将puer作为一个代理服务器使用。</p>
<p>比如本地已经存在一个localhost:8020的服务，你要在其上实现自动刷新的功能，请使用<code>-t 或 --target</code>。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">puer -t http:<span class="comment">//localhost:8020</span></div></pre></td></tr></table></figure>

<p><strong><a href="http://leeluolee.github.io/attach/2014-10/puer-step-3.gif" target="_blank" rel="external">【请戳演示GIF】</a></strong></p>
<p>需要注意的是，进阶2提到的addon是可以和这个模式配合使用，这使得我们在后台服务青黄不接的时候率先开发完前端功能，深藏功与名。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">puer -t http:<span class="comment">//localhost:8020 -a route.js</span></div></pre></td></tr></table></figure>

<p><strong><a href="http://leeluolee.github.io/attach/2014-10/puer-step-4.gif" target="_blank" rel="external">【请戳target配合addon的演示】</a></strong></p>
<h3 id="进阶3：_使用weinre调试所有经过puer的页面">进阶3： 使用weinre调试所有经过puer的页面</h3>
<p>weinre是目前最常用的远程调试工具，它虽然几乎无法调试JS，但是由于和平台、浏览器无关的特性，使得这个低效的工具一直流行至今，也有很多工具集成了它，比如我之前提到的MIHTool。</p>
<p>不过要使用weinre，你需要在每个调试的页面插入一个记不住名字的脚本，并开启weinre服务，这都属于重复性劳动。puer通过 <code>-i</code> flag来开启 weinre的内置集成，每一个经过puer的页面都会被自动注入脚本。你可以在9001端口找到你的weinre服务，也可以通过puer的初始页面进入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">puer -i</div></pre></td></tr></table></figure>

<p><strong><a href="http://leeluolee.github.io/attach/2014-10/puer-step-5.gif" target="_blank" rel="external">【请戳inspect的演示】</a></strong></p>
<h3 id="进_阶4：_作为中间件来应用与nodejs作为后台的产品">进 阶4： 作为中间件来应用与nodejs作为后台的产品</h3>
<p>这个功能其实并不常用了，它将puer作为express/connect服务器的中间件来使用，先贴个代码范例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">"connect"</span>)</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>)</div><div class="line"><span class="keyword">var</span> puer = <span class="built_in">require</span>(<span class="string">"puer"</span>)</div><div class="line"><span class="keyword">var</span> app = connect()</div><div class="line"><span class="keyword">var</span> server = http.createServer(app)</div><div class="line"></div><div class="line"><span class="keyword">var</span> options = {</div><div class="line">    dir: <span class="string">"path/to/watch/folder"</span>,</div><div class="line">    ignored: <span class="regexp">/(\/|^)\..*|node_modules/</span>  <span class="comment">//ignored file</span></div><div class="line">}</div><div class="line"></div><div class="line">app.use(puer.connect(app, server , options))   <span class="comment">//use as puer connect middleware</span></div><div class="line"><span class="comment">// you must use puer middleware before route and static midleware(before any middle may return 'text/html')</span></div><div class="line">app.use(<span class="string">"/"</span>, connect.static(__dirname))</div><div class="line"></div><div class="line"></div><div class="line">server.listen(<span class="number">8001</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"listen on 8001 port"</span>)</div><div class="line">})</div></pre></td></tr></table></figure>

<p>一般你在<code>development</code>环境开启它，而在<code>product</code>环境关闭即可，<strong>需要注意的是它必须放在可能输出html的中间件之前。</strong></p>
<hr>
<p>一个简单的<code>puer</code>命令可以带你在各个开发阶段自由飞翔，还不赶紧试一下？</p>
<h2 id="写在最后">写在最后</h2>
<p><strong>名字含义</strong> ： puer意为普洱，除了爱喝和够短没有任何含义，懒得取名罢了。</p>
<p>写puer的原动力是作者对<a href="http://www.getf5.com/" target="_blank" rel="external">f5网页免刷新工具</a>欲求不满（况且它如此简单的功能还需要开启一个桌面gui完全不能忍是么），所以功能抉择上带有一些主观性。如果你试用后，觉得它有价值并有改进余地，可以在<a href="https://github.com/leeluolee/puer/issues" target="_blank" rel="external">issues</a>下留下你的灼见(<strong>必须先来一发star</strong>)。</p>
<p><em>碰到问题先<code>puer -h</code>看看有没有你的答案</em></p>
<h3 id="资源汇总">资源汇总</h3>
<ol>
<li><strong><a href="https://github.com/leeluolee/puer" target="_blank" rel="external">puer（推荐）</a></strong>: “低碳”的前端服务器工具</li>
<li><a href="http://people.apache.org/~pmuellr/weinre-docs/latest/" target="_blank" rel="external">weinre(推荐)</a>:  常用远程调试工具</li>
<li><a href="https://github.com/rupa/z" target="_blank" rel="external">z(推荐)</a>:  Shell工具，快速跳转到最常用的目录。</li>
<li><a href="https://github.com/shakyShane/browser-sync" target="_blank" rel="external">browser-sync</a>: 包含puer的部分功能，同时提供多页面的操作同步(跳转、表单)</li>
<li><a href="http://www.mihtool.com/" target="_blank" rel="external">MIHTool</a>:MIHTool是前端工程师在iOS设备上调试和优化页面的得力助手（原slogan）</li>
<li><a href="">sublime-terminal</a>: 快速打开sublime工程或当前文件目录</li>
<li><a href="http://www.getf5.com/" target="_blank" rel="external">f5网页免刷新工具</a>：基于air的免刷新gui工具，习惯windows的gui工具的童鞋可以试用下。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>前几天，跟一同事(<a href="http://www.mihtool.com/" target="_blank" rel="external">MIHTool</a>作者)讨教了一下开发调试工具。其实个人觉得相较于定制一个类似MIHTool的Hybrid App容器，基于长连的B/S架构的工具其实会是一个更轻量的解决方案。此文会分享一下超简单工具<a href="http://github.com/leeluolee/puer" target="_blank" rel="external">puer</a>，以及如何利用它在产品开发的各阶段实现高效的开发。</p>
<p>本文title有点大哈，相较于目前国内正流行起来的前端后移的前后端分离方案，本文介绍是一种“低碳”的版本，所以不要纠结于这个Title的正确性哈。</p>
]]>
    
    </summary>
    
      <category term="tool" scheme="http://leeluolee.github.com/tags/tool/"/>
    
      <category term="nodejs" scheme="http://leeluolee.github.com/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://leeluolee.github.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[requirejs的插件介绍与制作]]></title>
    <link href="http://leeluolee.github.com/2014/10/19/write-requirejs-plugin/"/>
    <id>http://leeluolee.github.com/2014/10/19/write-requirejs-plugin/</id>
    <published>2014-10-19T07:39:17.000Z</published>
    <updated>2015-04-06T13:59:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>我这里就不介绍<a href="http://requirejs.org/" target="_blank" rel="external">requirejs</a>了， 简而言之： requirejs是支持<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">AMD</a>规范的模块加载器， 事实上它也是AMD的最直接推动者。</p>
<p>现在可供挑选的开源模块解决方案很多，比如component、cjs+browserify、umd等等，但是无疑类似requirejs这类加载系统是现在最成熟和可靠的解决方案，所以<a href="https://github.com/regularjs/regular" target="_blank" rel="external">regularjs</a>第一步就是提供对requirejs的插件支持。</p>
<a id="more"></a>
<hr>
<h2 id="requirejs的插件体系">requirejs的插件体系</h2>
<p>requirejs的源码内部预留了hook，使得你可以创建插件来增强这个模块系统，并且这个插件可以做到影响到你的<a href="http://requirejs.org/docs/optimization.html" target="_blank" rel="external">OPTIMIZER</a>阶段，一些资源可以被处理为标准的AMD模块。</p>
<p>插件普遍被用来</p>
<ol>
<li>预编译   </li>
<li>加载非js文本</li>
<li>lint 或 test 后置或前置的操作 等等</li>
</ol>
<p><strong>example</strong><br>比如它本身是不支持加载文本信息的，但是你可以通过<a href="http://requirejs.org/docs/api.html#text" target="_blank" rel="external">text!</a>插件来加载。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'text!foo.html'</span>, <span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span><span class="params">(foo, $)</span></span>{</div><div class="line">	$(<span class="string">'#anchor'</span>).html(foo);</div><div class="line">})</div></pre></td></tr></table></figure>

<p>需要注意的是由于文本无法用script标签进行加载，所以text内部是通过XHR来载入的，即它会受到同源策略的影响。</p>
<p><strong>优化OPTIMIZER</strong></p>
<p>由于requirejs同时提供工具(npm:requirejs)可以静态打包优化AMD，刚才的那个<code>text!foo.html</code>会同时被<strong>text插件</strong>转换为类似下面的AMD模块结构</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">'text!foo.html'</span>,[],<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{ </div><div class="line">	<span class="keyword">return</span> <span class="string">'&lt;h2&gt;早上好\n&lt;/h2&gt;'</span>;</div><div class="line">});</div></pre></td></tr></table></figure>

<p>requirejs的插件其实是一个<a href="http://requirejs.org/docs/plugins.html#apiload" target="_blank" rel="external">实现的特定接口</a>的标准AMD模块，它在定义时与其它业务模块并无区别。</p>
<p>例如官方text插件的源文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">define([<span class="string">'module'</span>], <span class="function"><span class="keyword">function</span> <span class="params">(module)</span> </span>{</div><div class="line"><span class="pi">    'use strict'</span>;</div><div class="line">    <span class="keyword">var</span> text = {</div><div class="line">	    load: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{}</div><div class="line">	    ....</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> text</div><div class="line">})</div></pre></td></tr></table></figure>

<p>其中load等接口是插件必须实现的，</p>
<p>对于各个接口描述我就不细究了，大家可以参考官网</p>
<p><strong>顺便列举一些有用的requirejs插件</strong></p>
<ol>
<li><a href="http://requirejs.org/docs/api.html#text" target="_blank" rel="external">text插件</a>(最常用插件)<br> 如果你的文本内容无需在打包优化阶段做处理，几乎都可以使用这个插件来完成加载</li>
<li><a href="">json插件</a><br> 比楼上多做了一步JSON.parse.</li>
<li><a href="http://requirejs.org/docs/api.html#pageload" target="_blank" rel="external">amd-loader</a>(好东西):<br> 注意不要requirejs本身弄混了，因为requirejs本身不是基于xhr的，这个插件主要是提供完善的xhr支持来加载文本内容。一句化即它是<strong>[插件的loader插件]</strong>，作者事后才发现有这么一个插件…绕了不少弯路。具体例子可以查看<a href="https://github.com/guybedford/es6" target="_blank" rel="external">es6</a></li>
<li><a href="https://github.com/SlexAxton/require-handlebars-plugin" target="_blank" rel="external">handlebars</a><br>  用来加载handlebar的插件</li>
</ol>
<p>其实由于amd等模块系统占据了开发中的模块入口这一环，其实在开发中可以有无限的可能性，这也是常规大公司都会自造一个轮子来最优配置的缘由之一，事实上requirejs目前的插件系统已经有足够的灵活性来定制自己的策略。</p>
<h3 id="实现requirejs-regular的过程">实现requirejs-regular的过程</h3>
<p><strong>背景</strong></p>
<p>首先我们先理清我们的需求, 与常规的的模板预编译类似，我们的插件主要为了实现两个功能。</p>
<ol>
<li>在开发阶段，我们希望能加载js文件一样，加载我们的模板文件，这带来的几个好处<ul>
<li>这使得我们不必将模板零散的填充到页面的script 或 textarea标签中</li>
<li>依赖系统唯一化, 模板依赖集成进了模块依赖中</li>
</ul>
</li>
<li>在优化阶段(即requirejs提供的<a href="http://requirejs.org/docs/optimization.html" target="_blank" rel="external">OPTIMIZER</a>的上线打包功能)，我们的模板字符串可以被预处理为序列化的AST对象，这样就不会发生浏览器端的解析，效率更高。</li>
</ol>
<p><strong>实现</strong></p>
<p>一个插件模块会同时跑在浏览器端(开发环境)和node端(为线上或测试环境的打包优化工具)，所以你的插件模块必须可以同时跑在浏览器端和node端，这个几乎是整个开发环境最麻烦的一部分</p>
<ol>
<li>regular.js的单文件虽然是<a href="https://github.com/umdjs/umd" target="_blank" rel="external">umd</a>模块可以支持amd环境，但是由于依赖的dom。所以首先要将parser部分(不依赖dom)打成一个AMD模块，由于regularjs本身就是基于commonjs的模块构建，将其中一部分打成AMD模块是分分钟的事情，这里我们使用<a href="https://github.com/webpack/webpack" target="_blank" rel="external">webpack</a>来打包成<a href="https://github.com/regularjs/regular/blob/master/dist/regular-parser.js" target="_blank" rel="external">regular-parser.js</a>，简单起见我们随regularjs模块一同发布到bower上</li>
<li>我们还要解决模板的加载问题，插件内部的加载问题也要手动解决，即你至少要实现<a href="http://requirejs.org/docs/plugins.html#apiload" target="_blank" rel="external">loader</a>接口和get接口。这里我们完全可以偷个懒，直接使用<strong>!text插件</strong>。</li>
</ol>
<p>即插件会依赖这两个模块</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'text'</span>, <span class="string">'regular-parser'</span>], <span class="function"><span class="keyword">function</span><span class="params">(text, parser)</span></span>{</div><div class="line">	<span class="comment">//blalalalala...</span></div><div class="line">	<span class="keyword">return</span>{</div><div class="line">		load: load,</div><div class="line">		write: write</div><div class="line">	}</div><div class="line">})</div></pre></td></tr></table></figure>

<p>然后我们只需要实现两个接口:</p>
<ul>
<li><strong>load</strong> </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> buildMap = {};</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">(name, req, onLoad, config)</span></span>{</div><div class="line">    text.load(name, req, <span class="function"><span class="keyword">function</span><span class="params">(data,r)</span></span>{</div><div class="line">        onLoad(</div><div class="line">          (buildMap[name] = parser.parse(data, <span class="literal">false</span>))</div><div class="line">        );</div><div class="line">    }, config);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这里直接使用了text插件的纯文本加载，需要注意的是这个onLoad接口，传入参数相当于模块的内容，我们这里预parse了这段文本内容。即你通过<code>rgl!template.html</code>最终会获得解析后的AST数据。</p>
<p>其实对于regularjs来讲在浏览器端有无进行模块系统层面的预解析并无意义，关键是在打包优化阶段。这里的<strong>buildMap</strong>主要是为了保存这段内容用于打包使用。</p>
<p><strong>write</strong><br>实现write接口主要是为了在打包优化阶段改写相关模块</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tpl = <span class="function"><span class="keyword">function</span><span class="params">(str, data)</span></span>{</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/\{\{(\w+)\}\}/g</span>, <span class="function"><span class="keyword">function</span><span class="params">(all, name)</span></span>{</div><div class="line">        <span class="keyword">return</span> data[name] || <span class="string">""</span></div><div class="line">    })</div><div class="line">}</div><div class="line"><span class="keyword">var</span> template =<span class="string">'define("{{pn}}!{{mn}}",function(){ return {{ast}} });\n'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">(pn, mn, writeModule)</span></span>{</div><div class="line">   <span class="keyword">if</span>(buildMap[mn]){</div><div class="line">       writeModule(</div><div class="line">           tpl(template,{</div><div class="line">               pn: pn,</div><div class="line">               mn: mn,</div><div class="line">               ast: parser.parse(buildMap[mn])</div><div class="line">           })</div><div class="line">       )</div><div class="line">   }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>此时这个插件必须依赖于两个模块，即必须同时保证<code>text</code>和<code>regular-parser</code>模块同时存在，类似的方案可以查看<a href="https://github.com/millermedeiros/requirejs-hogan-plugin" target="_blank" rel="external">hogan</a>，它必须保证环境中有<code>hogan</code>和<code>text</code>才可以运行. 熟悉requirejs打包过程的同学也知道，除了loader端的配置，我们在build的打包文件也需要一并将这些依赖模块剔除，因为上线时是不需要这些插件的。<strong>所以这将大大增加配置成本</strong>，其实解决方案也很简单，就是使用[webpack]再将其打包成一个standlone的AMD模块即可，具体可以参考<a href="https://github.com/regularjs/requirejs-regular" target="_blank" rel="external">这里的gulpfile</a>。</p>
<p><strong>大功告成</strong></p>
<p>使用就非常简单了，和你使用<a href="">requirejs-text</a>差不多, </p>
<p>1.首先下载<a href="https://github.com/regularjs/requirejs-regular#download" target="_blank" rel="external">rgl.js</a>，最简单的就是bower安装</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower <span class="operator"><span class="keyword">install</span> regularjs-regular <span class="comment">--save</span></span></div></pre></td></tr></table></figure>

<p><em>save参数是安装后并写入到bower.json中，这个和npm一致</em></p>
<p>2.配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">require</span><span class="class">.config</span>(<span class="rules">{</span></div><div class="line">   <span class="rule"><span class="attribute">paths </span>:<span class="value"> {</span></span></div><div class="line">       <span class="string">"rgl"</span>: <span class="string">'../../bower_components/regularjs-regular/rgl'</span>，</div><div class="line">       // 同时载入我们的regularjs来使用这些模板</div><div class="line">       <span class="string">"regularjs"</span>: <span class="string">'../../bower_components/regularjs/dist/regular'</span></div><div class="line">   }</div><div class="line">});</div></pre></td></tr></table></figure>

<p>3.使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'rgl!./foo.html'</span>, <span class="string">'regularjs'</span>], <span class="function"><span class="keyword">function</span><span class="params">( tpl, Regular)</span></span>{</div><div class="line"></div><div class="line">    <span class="keyword">var</span> Foo = Regular.extend({</div><div class="line">      template: tpl</div><div class="line">    })</div><div class="line"></div><div class="line">    <span class="keyword">new</span> Foo({}).$inject(<span class="string">"#app"</span>)</div><div class="line"></div><div class="line">});</div></pre></td></tr></table></figure>

<p>4.打包</p>
<p>模板文件<code>&lt;h2&gt;{{message}}&lt;/h2&gt;</code>经过插件处理后会打包成</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">"rgl!foo.html"</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{<span class="keyword">return</span> [{<span class="string">"type"</span>:<span class="string">"element"</span>,<span class="string">"tag"</span>:<span class="string">"h2"</span>,<span class="string">"attrs"</span>:[],<span class="string">"children"</span>:[{<span class="string">"type"</span>:<span class="string">"expression"</span>,<span class="string">"body"</span>:<span class="string">"_c_._sg_('message', _d_['message'])"</span>,<span class="string">"constant"</span>:<span class="literal">false</span>,<span class="string">"setbody"</span>:<span class="string">"_c_._ss_('message',_p_,_d_, '=')"</span>}]}] });</div></pre></td></tr></table></figure>

<p>即上线后就不会有parse了，比如PO主目前正在开发的项目在初期就有几十个模板文件，build成单文件后的运行时开销还是应该尽量避免.</p>
<p><strong>tip：build.js记得通过</strong>stubModules<strong>配置项目删除掉这个插件模块，具体看demo的<a href="https://github.com/regularjs/requirejs-regular/blob/master/demo/build.js" target="_blank" rel="external">build.js</a>。</strong></p>
<h3 id="对于NEJ的使用者">对于NEJ的使用者</h3>
<p><strong>NEJ的新模块系统支持上述类似的regular模板加载了</strong></p>
<p>网易杭州的同事，事实上你已经可以在NEJ的<strong>新模块系统中</strong>（完全兼容老版本）通过<code>regular!path/to/template.html</code>的方式来加载你的regular模板了，打包之后模板将会被预解析，同时新版NEJ也支持<code>text!</code>加载纯文本内容, 详询<strong>@飞锅</strong>。新版本的加载系统，支持类似AMD的注入写法，并且兼容老版本的模块写法，亲测好用哈。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2>
<p>我这里就不介绍<a href="http://requirejs.org/" target="_blank" rel="external">requirejs</a>了， 简而言之： requirejs是支持<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">AMD</a>规范的模块加载器， 事实上它也是AMD的最直接推动者。</p>
<p>现在可供挑选的开源模块解决方案很多，比如component、cjs+browserify、umd等等，但是无疑类似requirejs这类加载系统是现在最成熟和可靠的解决方案，所以<a href="https://github.com/regularjs/regular" target="_blank" rel="external">regularjs</a>第一步就是提供对requirejs的插件支持。</p>
]]>
    
    </summary>
    
      <category term="javascript" scheme="http://leeluolee.github.com/tags/javascript/"/>
    
      <category term="requirejs" scheme="http://leeluolee.github.com/tags/requirejs/"/>
    
      <category term="regularjs" scheme="http://leeluolee.github.com/tags/regularjs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端模板技术面面观]]></title>
    <link href="http://leeluolee.github.com/2014/10/10/template-engine/"/>
    <id>http://leeluolee.github.com/2014/10/10/template-engine/</id>
    <published>2014-10-10T10:59:49.000Z</published>
    <updated>2015-04-06T13:59:36.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>此文的写作耗时很长，称之为雄文不为过，小心慢用</p>
</blockquote>
<h2 id="此文缘由">此文缘由</h2>
<p>其实从发布<a href="http://github.com/regularjs/regular" target="_blank" rel="external">regularjs</a>之后，我发现在google搜索regularjs 不是给我这个画面</p>
<p><img src="http://leeluolee.github.io/attach/template-engine/regularjs-search1.png" alt="regular-search-1"></p>
<a id="more"></a>
<p>就是给我这个画面</p>
<p><img src="http://leeluolee.github.io/attach/template-engine/regular-search-2.png" alt="regular-search-2"></p>
<p>突然发现取名字真是个大学问，当时就基本预计到了会有不明真相的朋友认为它只是一个照搬<a href="http://angularjs.org" target="_blank" rel="external">angularjs</a>的家伙，对于这点，有兴趣的朋友可以看下<a href="http://regularjs.github.io/guide/zh/introduct/README.html" target="_blank" rel="external">【为什么要造Regularjs这个轮子】</a>。</p>
<p>而在这个文章，我<strong>不会直截了当去与angular做直接的对比</strong>，而是从最基本原理开始对现有的<strong>模板解决方案</strong>进行一个全面的分类，同时会给出它们的一些或优或劣的特性，这些特性基本都是本质性的，即它不为<strong>维护者的水平高低和勤勉与否</strong>所限制，所以是具有客观性的。</p>
<hr>
<h2 id="什么是模板解决方案？">什么是模板解决方案？</h2>
<p>你可以先简单的理解为模板引擎。</p>
<p>事实上前端的模板解决方案已经从 <strong>“选出一个好用的模板好难”</strong> 发展到了 <strong>“从这么多模板中选一个好难的”</strong>的阶段，<a href="http://garann.github.io/template-chooser/" target="_blank" rel="external">Template-Engine-Chooser!</a>似乎也开始无法跟上节奏了。再加上目前Dom-based的模板技术的崛起(angularjs, knockout等)，渐渐让这个领域有乱花渐欲迷人眼的感觉。</p>
<p>这篇文章会对当今前端界的三种截然不同的模板方案做一个全面的对比，它们分别是</p>
<ol>
<li><strong>String-based 模板技术</strong> (基于字符串的parse和compile过程)</li>
<li><strong>Dom-based 模板技术</strong> (基于Dom的link或compile过程)</li>
<li>杂交的<strong>Living templating 技术</strong> (基于字符串的parse 和 基于dom的compile过程)</li>
</ol>
<p>同种类型的模板技术的<strong>可能性</strong>都是相同的，即同样身为dom-based的<a href="http://vuejs.org" target="_blank" rel="external">vuejs</a>如果愿意可以发展为angularjs的相同功能层级。</p>
<p>(<em>注: 其实这么说作者后续思考后觉得并不是很妥当，因为决定这类框架的还有重要一环就是它们的数据管理层:，比如是基于脏检查还是基于setter和getter，就会有截然不同的定位</em>)</p>
<p>另外需要注意的是任何一种类型的模板技术都是不可被替代的，它们甚至可以结合使用，并且很长一段时间内还会继续共存下去。</p>
<p>除此之外另外一种奇葩模板技术本文也会提到即<strong>react</strong>，了解后你会发现它的特性更接近于Living templating。</p>
<p>在进入介绍之前，我们需要先过一下不得不说的 <strong>InnerHTML</strong>，它是本文的关键因素。</p>
<h2 id="innerHTML">innerHTML</h2>
<p>我不认为还需要从<code>innerHTML</code>的细节讲起，我们对它太熟悉了，那就直接从优劣开始讲吧！</p>
<h3 id="innerHTML_毫无疑问是好的">innerHTML 毫无疑问是好的</h3>
<p>在<code>innerHTML</code>正是成为 <a href="https://domparsing.spec.whatwg.org/#innerhtml" target="_blank" rel="external">web 标准</a> 前，它当之无愧的已经是大家公认的事实标准，这是因为：</p>
<p><strong>1 . 它便于书写并且直观</strong></p>
<p>想象下你必须添加如下的html到你的文档里</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">h2</span> <span class="attribute">title</span>=<span class="value">"header"</span>&gt;</span>title<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>content<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div></pre></td></tr></table></figure>

<p>直接使用 <code>innerHTML</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node.innerHTML = <span class="string">"&lt;h2 title="</span>heade<span class="string">r"&gt;title&lt;/h2&gt;&lt;p&gt;content&lt;/p&gt;"</span></div></pre></td></tr></table></figure>

<p>在对比使用<code>Dom API</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> header = <span class="built_in">document</span>.createElement(<span class="string">'h2'</span>);</div><div class="line"><span class="keyword">var</span> content = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</div><div class="line">h2.setAttribute(<span class="string">'title'</span>, <span class="string">'header'</span>);</div><div class="line">h2.textContent = <span class="string">'title'</span>;</div><div class="line">p.textContent = <span class="string">'content'</span>;</div><div class="line">node.appendChild(header);</div><div class="line">node.appendChild(content);</div></pre></td></tr></table></figure>

<p><code>innerHTML</code> 毫无疑问赢得了这张比赛.</p>
<p>尽管部分框架例如<a href="http://mootools.net/docs/core/Element/Element#Element:constructor" target="_blank" rel="external">mootools:Element</a> 提供了高效的API来帮助你创建dom结构，<code>innerHTML</code>仍然会是大多数人的最佳选择</p>
<p><strong>2 . 它很快，特别在<a href="http://www.quirksmode.org/dom/innerhtml.html" target="_blank" rel="external">old IE</a></strong></p>
<blockquote>
<p>随着浏览器的发展，这个测试可能越来越不符合实际，<code>innerHTML</code>和 <code>Dom Level 1</code>创建dom结构的差距正变得原来越小  </p>
</blockquote>
<p><strong>3. 它完成进行了String -&gt; Dom的转换</strong></p>
<p>这个论点有点拗口，事实上后续要提到的两类模板技术都是因为这个特点而与其有了强依赖</p>
<hr>
<p>然而我们又清楚的被告知: </p>
<blockquote>
<p><em>The recommended way to modify the DOM is to use the DOM Level 1 API.</em><br> ——Chapter 15 of “Javascript: The Definitive Guide_”</p>
</blockquote>
<p>为什么？</p>
<h3 id="innerHTML_有时候又是不听话的">innerHTML 有时候又是不听话的</h3>
<p><strong>1. 安全问题</strong></p>
<p><code>innerHTML</code> 具有安全隐患.,例如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.body.innerHTML = "<span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">x</span>   <span class="attribute">onerror</span>=<span class="value">'alert(xss)'</span>/&gt;</span>"</div></pre></td></tr></table></figure>

<p>我知道像你这样优秀的程序员不会写出这样的代码，但当html片段不完全由你来控制时(比如从远程服务器中)，这会成为一个可能引爆的炸弹。</p>
<p><strong>2. 它很慢</strong></p>
<p>等等，你刚才说了它很快！<br>是的，但是如果你仅仅为了替换一个属性而用<code>innerHTML</code>替换了所有的Dom节点，这显然不是一个明智的决定，因为你深知这是低效的。所以说:</p>
<blockquote>
<p>Context is everything</p>
</blockquote>
<p>所有离开背景谈的性能、功能、性功能都是伪科学</p>
<p><strong>3. 它很笨</strong></p>
<p>它会完全移除所有现有的Dom，并重新渲染一遍，包括事件和状态都以不复存在，这点利用innerHTML来进行render的框架(例如Backbone)的开发者应该深有体会，为了减少损失，不能不把View拆的越来越细，从而抱着看似“解耦完美”的架构体系进入了维护的深渊。</p>
<p><em>注: 其实react的最大贡献就是它差不多是提供了一个更smart的innerHTML解决方案。</em></p>
<p><strong>4. 有可能会创建出意料之外的节点.</strong></p>
<p>由于html的parser非常的<strong>“友好”</strong>， 以至于它接受并不规范的写法，从而创建出意料之外的结构，而开发者得不到错误提示。</p>
<hr>
<p>好了，到现在为止，我们大概了解了<code>innerHTML</code>这个朝夕相处的小伙伴，接下来我们正式聊一聊模板技术，首先我们从最常见的<strong>“String-based templating”</strong>开始</p>
<h2 id="String-based_templating">String-based templating</h2>
<p>基于字符串的模板引擎最大的功劳就是把你从大量的夹带逻辑的字符串拼接中解放出来了，由于它的完全基于字符串的特性，它拥有一些无可替代的优势。</p>
<blockquote>
<p>It is essentially a way to address the need to populate an HTML view with data in a better way than having to write a big, ugly string concatenation expression.<br>—- cited from <a href="http://www.dehats.com/drupal/?q=node/107" target="_blank" rel="external">http://www.dehats.com/drupal/?q=node/107</a></p>
</blockquote>
<p><strong>示例</strong></p>
<ol>
<li><a href="http://mustache.github.io/" target="_blank" rel="external">mustache</a>及其衍生: 弱逻辑</li>
<li><a href="http://linkedin.github.io/dustjs/" target="_blank" rel="external">Dust.js</a>: 强逻辑 (推荐)</li>
<li><a href="olado.github.io/">doT.js</a>:  超级快</li>
</ol>
<p><strong>基本原理</strong></p>
<p><img src="http://leeluolee.github.io/attach/template-engine/String-based-Template.png" alt="string-based"></p>
<p>如上图所示，我们发现字符串模板强依赖于<code>innerHTML</code>(渲染), 因为它的输出物就是字符串。由于这篇文章的重点不在这里，我们不会再对它们如何使用作深究。</p>
<p><strong>优点</strong></p>
<ol>
<li>快速的初始化时间: 很多angular的簇拥者在奚落String-based templating似乎遗漏了这一点。</li>
<li>同构性: 完全的dom-independent，即可作为用服务器端和浏览器端(客官先不要急着搬phantomjs哈).</li>
<li>更强大的语法支持：因为它们都是不是自建DSL就是基于JavaScript语法，Parser的灵活性与受限于HTML的Dom-based模板技术不可同日而语</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li>安全隐患:  见<code>innerHTML</code></li>
<li>性能问题：见 <code>innerHTML</code>.</li>
<li>不够聪明:  见<code>innerHTML</code>(呵呵)，除此之外render之后数据即与view完全分离。</li>
</ol>
<p>尽管在这几年的发展之下，由于异常激烈的竞争，基于字符串的前端模板技术变得越来越快，但是它们显然大部分都遗漏了一些问题</p>
<ol>
<li>大侠们你们没有考虑进把输出字符串加载到Dom的时间，这才是<a href="https://github.com/leonidas/transparency/wiki/Defining-template-engine-performance" target="_blank" rel="external">真正瓶颈之一</a></li>
<li>不在相同功能前提下的对比有意义么？</li>
</ol>
<h2 id="Dom-based_Template_Engine">Dom-based Template Engine</h2>
<p>近几年，借着Angularjs的东风，Dom-based的模板技术开始大行其道，与此同时也出现了一些优秀的替代者，就我们国人而言，近的就有<a href="http://weibo.com/arttechdesign" target="_blank" rel="external">@尤小右</a>的<a href="http://vuejs.org" target="_blank" rel="external">Vuejs</a> 和 <a href="">司徒大大</a>的<a href="https://github.com/RubyLouvre/avalon" target="_blank" rel="external">avalonjs</a>。看仓库就可以发现风格也是完全不同：1) 一个简洁优雅  2)一个奔放不羁</p>
<p><strong>示例</strong></p>
<ol>
<li>Angularjs:  都28000star了还需多说么</li>
<li>Knockout:  在此领域内，对Web前端而言是鼻祖级的</li>
</ol>
<p><strong>大致流程</strong></p>
<p><img src="http://leeluolee.github.io/attach/template-engine/Dom-based-Template.png" alt="dom-based"></p>
<p>Dom-based的模板技术事实上并没有完整的parse的过程(先抛开表达式不说)，如果你需要从一段字符串创建出一个view，你必然通过<code>innerHTML</code>来获得初始Dom结构. 然后引擎会利用<code>Dom API</code>(<code>attributes</code>, <code>getAttribute</code>, <code>firstChild</code>… etc)层级的从这个原始Dom的属性中提取指令、事件等信息，继而完成数据与View的绑定，使其”活动化”。</p>
<p>所以Dom-based的模板技术更像是一个数据与dom之间的<strong>“链接”</strong>和<strong>“改写”</strong>过程。</p>
<p><em>注意，dom-based的模板技术不一定要使用<code>innerHTML</code>，比如所有模板都是写在入口页面中时, 但是此时parse过程仍然是浏览器所为。</em></p>
<p><strong>优点</strong></p>
<ol>
<li>是活动的:  完成compile之后，data与View仍然保持联系，即你可以不依赖与手动操作<code>Dom API</code>来更新View</li>
<li>是<strong>运行时</strong>高效的: 可以实现局部更新</li>
<li>指令等强大的附属物帮助我们用声明式的方式开发APP</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li>部分请见innerHTML</li>
<li>没有独立的Parser，必须通过innerHTML(或首屏)获取初始节点，即它的语法是强依赖与HTML，这也导致它有潜在的安全问题</li>
<li>信息承载于属性中，这个其实是不必要和冗余的。<br> 部分框架在读取属性后会通过诸如<code>removeAttribute</code>的方式移除它们，其实这个不一定必要，而且其实并无解决它们Dom强依赖的特性，比如如果你查看[angular的todomvc]的节点，你会发现它的输出是这样的:<br> <img src="http://leeluolee.github.io/attach/template-engine/angular-todo.png" alt="angular-todo"></li>
<li>FOUC(Flash of unstyled content)：即内容闪动，这个无需多说了，只怪它初次进入dom的内容并不是最终想要的内容。</li>
</ol>
<h2 id="Living_Template_Engine">Living Template Engine</h2>
<p>String-based 和 Dom-based的模板技术都或多或少的依赖与<code>innerHTML</code>, 它们的区别是一个是主要是为了<strong>Rendering</strong> 一个是为了 <strong>Parsing</strong> 提取信息</p>
<blockquote>
<p> 所以为什么不结合它们两者来完全移除对<code>innerHTML</code>的依赖呢？</p>
</blockquote>
<p>事实上，值得庆幸的是，已经有几个现实例子在这么做了。</p>
<p><strong>例子</strong></p>
<ol>
<li><a href="https://github.com/tildeio/htmlbars" target="_blank" rel="external">htmlbar</a>:  运行在<a href="">handlebar</a>之后的二次编译</li>
<li><a href="https://github.com/ractivejs/ractive" target="_blank" rel="external">ractivejs</a>:  独立</li>
<li><a href="https://github.com/regularjs/regular" target="_blank" rel="external"><strong>Regularjs</strong></a> 独立,  <strong>本文作者结精之一</strong></li>
</ol>
<p><strong>基本原理</strong></p>
<p><img src="http://leeluolee.github.io/attach/template-engine/Living-Template.png" alt="Living-Template"></p>
<p>就如图中所示，parse和compile的过程分别类似于String-based 模板技术 和 Dom-based模板技术。</p>
<p>下面来完整讲述下这两个过程</p>
<h3 id="1_-_Parsing">1 . Parsing</h3>
<p>首先我们使用一个内建DSL来解析模板字符串并输出AST。</p>
<p>例如，在<a href="https://github.com/regularjs/regular" target="_blank" rel="external">regularjs</a>中，下面这段简单的模板字符串</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">button</span> {{#<span class="attribute">if</span> !<span class="attribute">isLogin</span>}} <span class="attribute">on-click</span>=<span class="value">{{this.login()}}</span> {{/<span class="attribute">if</span>}}&gt;</span></div><div class="line">  {{isLogin? 'Login': 'Wellcome'}}</div><div class="line"><span class="tag">&lt;/<span class="title">button</span>&gt;</span>'</div></pre></td></tr></table></figure>

<p>会被解析为以下这段数据结构</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  {</div><div class="line">    <span class="string">"type"</span>: <span class="string">"element"</span>,</div><div class="line">    <span class="string">"tag"</span>: <span class="string">"button"</span>,</div><div class="line">    <span class="string">"attrs"</span>: [</div><div class="line">      {</div><div class="line">        <span class="string">"type"</span>: <span class="string">"if"</span>,</div><div class="line">        <span class="string">"test"</span>: {</div><div class="line">          <span class="string">"type"</span>: <span class="string">"expression"</span>,</div><div class="line">          <span class="string">"body"</span>: <span class="string">"(!_d_['isLogin'])"</span>,</div><div class="line">          <span class="string">"constant"</span>: <span class="literal">false</span>,</div><div class="line">          <span class="string">"setbody"</span>: <span class="literal">false</span></div><div class="line">        },</div><div class="line">        <span class="string">"consequent"</span>: [</div><div class="line">          [</div><div class="line">            {</div><div class="line">              <span class="string">"type"</span>: <span class="string">"attribute"</span>,</div><div class="line">              <span class="string">"name"</span>: <span class="string">"on-click"</span>,</div><div class="line">              <span class="string">"value"</span>: {</div><div class="line">                <span class="string">"type"</span>: <span class="string">"expression"</span>,</div><div class="line">                <span class="string">"body"</span>: <span class="string">"_c_['login']()"</span>,</div><div class="line">                <span class="string">"constant"</span>: <span class="literal">false</span>,</div><div class="line">                <span class="string">"setbody"</span>: <span class="literal">false</span></div><div class="line">              }</div><div class="line">            }</div><div class="line">          ]</div><div class="line">        ],</div><div class="line">        <span class="string">"alternate"</span>: []</div><div class="line">      }</div><div class="line">    ],</div><div class="line">    <span class="string">"children"</span>: [</div><div class="line">      {</div><div class="line">        <span class="string">"type"</span>: <span class="string">"expression"</span>,</div><div class="line">        <span class="string">"body"</span>: <span class="string">"_d_['isLogin']?'Login':'Wellcome'"</span>,</div><div class="line">        <span class="string">"constant"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="string">"setbody"</span>: <span class="literal">false</span></div><div class="line">      }</div><div class="line">    ]</div><div class="line">  }</div><div class="line">]</div></pre></td></tr></table></figure>

<p>这个过程有以下特点</p>
<ol>
<li>灵活强大的语法，因为它与基于字符串的模板一般，DSL是自治的，完全不依赖与html，你可以想像下dom-based的模板的那些语法相关的指令，<strong>事实上它们甚至无法表达上述那段简单的模板的逻辑。</strong></li>
<li>Living模板技术需要同时处理<code>dsl元素</code> 与 <code>xml元素</code>来实现最终视图层的活动性，即它们是<strong>dom-aware</strong>的，而在字符串模板中其实<code>xml元素</code>完全可以无需关心，它们被统一视为<code>文本元素</code>。</li>
</ol>
<h3 id="2_Compiler">2 Compiler</h3>
<p>结合特定的数据模型(在regularjs中，是一个裸数据)， 模板引擎层级游历AST并递归生成Dom节点(不会涉及到<code>innerHTML</code>). 与此同时，指令、事件和插值等binder也同时完成了绑定，使得最终产生的Dom是与Model相维系的，即是<strong>活动的</strong>. </p>
<p>事实上，Living template的compile过程相对与Dom-based的模板技术更加纯粹, 因为它完全的依照AST生成，而不是在原Dom上的改写。</p>
<p>以上面的模板代码的一个插值为例:<code>{{isLogin? &#39;Login&#39;: &#39;Wellcome&#39;}}</code>。一旦regularjs的引擎遇到这段模板与代表的语法元素节点，会进入如下函数处理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// some sourcecode from regularjs</span></div><div class="line">walkers.expression = <span class="function"><span class="keyword">function</span><span class="params">(ast)</span></span>{</div><div class="line">  <span class="keyword">var</span> node = <span class="built_in">document</span>.createTextNode(<span class="string">""</span>);</div><div class="line">  <span class="keyword">this</span>.$watch(ast, <span class="function"><span class="keyword">function</span><span class="params">(newval)</span></span>{</div><div class="line">    dom.text(node, <span class="string">""</span> + (newval == <span class="literal">null</span>? <span class="string">""</span>: <span class="built_in">String</span>(newval)));</div><div class="line">  })</div><div class="line">  <span class="keyword">return</span> node;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>正如我们所见， 归功于<code>$watch</code>函数，一旦表达式发生改变，文本节点也会随之改变，这一切其实与angularjs并无两样(事实上regularjs同样也是基于脏检查)</p>
<p>与Dom-based 模板技术利用Dom节点承载信息所不同的是，它的中间产物AST 承载了所有Compile过程中需要的信息(语句, 指令, 属性…等等). 这带来几个好处</p>
<ol>
<li><strong>轻量级</strong>, 在Dom中进行读写操作是低效的.</li>
<li><strong>可重用的</strong>. </li>
<li><strong>可序列化</strong> , 你可以在本地或服务器端预处理这个过程。</li>
<li><strong>安全</strong>, 因为安全不需要<code>innerHTML</code>帮我们生成初始Dom</li>
</ol>
<p>如果你查看Living Template的输出，你会发现是这样的</p>
<p><img src="http://leeluolee.github.io/attach/template-engine/regular-todo.png" alt="regular-todo"></p>
<p>只有需要的内容被输出了</p>
<p><strong>总结Living templating </strong></p>
<p>我们可以发现Living templating几乎同时拥有String-based和Dom-based模板技术的优点</p>
<p>利用一个如字符串模板的自定义DSL来描述结构来达到了语法上的灵活性，并在Parse后承载信息(AST)。而在Compile阶段,利用AST和<code>Dom API</code>来完成View的组装，在组装过程中，我们同样可以引入Dom-based模板技术的诸如<code>Directive</code>等优良的种子。</p>
<h3 id="living_template’s_近亲_——_React">living template’s 近亲 —— React</h3>
<p>React当然也可以称之为一种模板解决方案，它同样也巧妙规避了<code>innerHTML</code>，不过却使用的是截然不同的策略：react使用一种<code>virtual dom</code> 的技术，它也同样基于脏检查，不过与众不同的是，它的脏检查发生在view层面，即发生在virtual dom上，从而可以以较小的开销来实现局部更新。</p>
<p><strong>Example</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var MyComponent = React.createClass({</div><div class="line"> render: function() {</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.props.first) {</div><div class="line">     <span class="keyword">return</span> &lt;<span class="keyword">div</span> className=<span class="string">"first"</span>&gt;&lt;span&gt;A Span&lt;<span class="regexp">/span&gt;&lt;/</span><span class="keyword">div</span>&gt;;</div><div class="line">   } <span class="keyword">else</span> {</div><div class="line">     <span class="keyword">return</span> &lt;<span class="keyword">div</span> className=<span class="string">"second"</span>&gt;&lt;p&gt;A Paragraph&lt;<span class="regexp">/p&gt;&lt;/</span><span class="keyword">div</span>&gt;;</div><div class="line">   }</div><div class="line"> }</div><div class="line">});</div></pre></td></tr></table></figure>

<p>同样的逻辑使用regularjs描述</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">{{#if first}}</div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span>&gt;</span>A Span<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">{{#else}}</div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">className</span>=<span class="value">"second"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>A Paragraph<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>;</div><div class="line">{{/if}}</div></pre></td></tr></table></figure>

<p><strong>仁者见仁智者见智</strong>, 反正我倾向于使用模板来描述结构，而不是杂糅Virtual dom和js语句。你呢？</p>
<p>值得一提的是，由于React的特性，它两次render之间，内部节点的替换是无法预计的(参考<a href="http://calendar.perfplanet.com/2013/diff/" target="_blank" rel="external">这里</a>)，所以无法有效的保留信息，所以它也有大量的关于id的placeholder存在。你可以同样查看<a href="http://todomvc.com/architecture-examples/react/#/" target="_blank" rel="external">react-todomvc生成的节点</a></p>
<h2 id="一个全面的对照表">一个全面的对照表</h2>
<table>
<thead>
<tr>
<th>Contrast /Solutions</th>
<th>String-based templating</th>
<th>Dom-based templating</th>
<th>Living templating</th>
</tr>
</thead>
<tbody>
<tr>
<td>例子</td>
<td>Mustache,Dustjs</td>
<td>Angularjs, Vuejs</td>
<td>Regularjs 、Ractivejs、htmlbars</td>
<td></td>
<td>Usage</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>语法</td>
<td>♦♦♦</td>
<td>♦♦♦</td>
<td>♦♦♦</td>
</tr>
<tr>
<td>活动性</td>
<td>X</td>
<td>♦♦♦</td>
<td>♦♦♦</td>
</tr>
<tr>
<td>性能</td>
<td>初始: ♦♦♦<br> 更新: ♦</td>
<td>初始: ♦ <br> 更新: ♦♦♦</td>
<td>初始: ♦ <br> 更新: ♦♦♦</td>
</tr>
<tr>
<td>安全性</td>
<td>♦</td>
<td>♦♦</td>
<td>♦♦♦♦♦</td>
</tr>
<tr>
<td>Dom 无关</td>
<td>♦♦♦♦♦</td>
<td>X</td>
<td>♦♦</td>
</tr>
<tr>
<td>SVG support(*1)</td>
<td>X</td>
<td>♦♦</td>
<td>♦♦♦</td>
</tr>
</tbody>
</table>
<ol>
<li>任何一类无法被另一类全面替代</li>
<li>它们并不是无法同时存在的，比如你可以使用字符串模板来生成Dom-based的模板需要的模板字符串。</li>
</ol>
<h3 id="参考资料">参考资料</h3>
<ol>
<li><a href="http://codingarchitect.wordpress.com/2012/10/22/template-engines/" target="_blank" rel="external">Template Engines by @Sendhil</a></li>
<li><a href="http://modernweb.com/2014/03/24/string-templating-considered-harmful/" target="_blank" rel="external">string-templating-considered-harmful</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>此文的写作耗时很长，称之为雄文不为过，小心慢用</p>
</blockquote>
<h2 id="此文缘由">此文缘由</h2>
<p>其实从发布<a href="http://github.com/regularjs/regular" target="_blank" rel="external">regularjs</a>之后，我发现在google搜索regularjs 不是给我这个画面</p>
<p><img src="http://leeluolee.github.io/attach/template-engine/regularjs-search1.png" alt="regular-search-1"></p>
]]>
    
    </summary>
    
      <category term="regularjs" scheme="http://leeluolee.github.com/tags/regularjs/"/>
    
      <category term="javascript" scheme="http://leeluolee.github.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一步步教你实现一个todomvc(基于Regularjs)]]></title>
    <link href="http://leeluolee.github.com/2014/08/25/create-a-todomvc-step-by-step/"/>
    <id>http://leeluolee.github.com/2014/08/25/create-a-todomvc-step-by-step/</id>
    <published>2014-08-25T01:29:24.000Z</published>
    <updated>2015-04-06T13:59:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>现在市面上充斥了越来越多的javascript框架，给开发者的技术选型带来极大的选择成本，<a href="http://todomvc.com/" target="_blank" rel="external">todomvc</a>在这个环境下应运而生. </p>
<p>由于todomvc有一个完整的实现定义，它复杂度适中，大概就是平时开发的一个组件的功能复杂度，开发者可以轻松对各个框架的代码做对比，同时由于功能一致，也可以进行各框架之间的<a href="http://regularjs.github.io/perf/todomvc-benchmark/index.html" target="_blank" rel="external">性能对比(当然这个测试案例其实并没有很大的实际意义)</a>. </p>
<p><img src="http://todomvc.com/site-assets/screenshot.png" alt="todomvc"></p>
<a id="more"></a>
<p>接下来这篇指南会一步步的带大家使用<a href="http://regularjs.github.io/" target="_blank" rel="external">Regularjs</a>实现一个完整的todomvc的app(主要是逻辑部分)</p>
<p><a href="http://regularjs.github.io/" target="_blank" rel="external">Regularjs</a>是类似react定位的组件库，它其实是一个结合了基于字符串的parser和基于Dom的compiler的动态模板引擎，它compile之后的内容会与dom产生关联(而不是死的字符串)，帮助你实现动态的模板效果，你可以利用以往使用字符串模板的经验来快速实现一个富功能的组件。</p>
<blockquote>
<p>你也可以先参考官方指南的Getting-Start章节(<a href="http://regularjs.github.io/guide/zh/getting-start/README.html" target="_blank" rel="external">中文</a>, <a href="http://regularjs.github.io/guide/en/getting-start/README.html" target="_blank" rel="external">英文</a>)</p>
</blockquote>
<h2 id="第一步:_静态页面">第一步: 静态页面</h2>
<p>第一步，我们需要一个完整的静态页面作为后续逻辑的基础，这里我们不再详细介绍如何实现这个页面，直接从todomvc的官网copy一份静态页面下来.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--引入todomvc.css--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"http://todomvc.com/architecture-examples/angularjs/bower_components/todomvc-common/base.css"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"todoapp"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>TODOmvc<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"new-todo"</span> <span class="attribute">placeholder</span>=<span class="value">"What needs to be done?"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"main"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"toggle-all"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"toggle-all"</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"todo-list"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"completed"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"view"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">input</span> <span class="attribute">class</span>=<span class="value">"toggle"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">checked</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">label</span>&gt;</span>sleep<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"edit"</span> <span class="attribute">class</span>=<span class="value">"edit"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">""</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"view"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">input</span> <span class="attribute">class</span>=<span class="value">"toggle"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">label</span>&gt;</span>work<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"edit"</span> <span class="attribute">class</span>=<span class="value">"edit"</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">section</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">footer</span> <span class="attribute">id</span>=<span class="value">"footer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"todo-count"</span>&gt;</span> <span class="tag">&lt;<span class="title">strong</span>&gt;</span>1<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></div><div class="line">      item left</div><div class="line">    <span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"filters"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span> <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"selected"</span>&gt;</span>All<span class="tag">&lt;/<span class="title">a</span>&gt;</span> <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span> <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">""</span>&gt;</span>Active<span class="tag">&lt;/<span class="title">a</span>&gt;</span> <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span> <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">""</span>&gt;</span>Completed<span class="tag">&lt;/<span class="title">a</span>&gt;</span> <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"clear-completed"</span>&gt;</span>Clear completed (1)<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">footer</span> <span class="attribute">id</span>=<span class="value">"info"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Double-click to edit a todo<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Created by @leeluolee<span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span></div><div class="line">    Part of</div><div class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://todomvc.com"</span>&gt;</span>TodoMVC<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">footer</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 引入regularjs --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://rawgit.com/regularjs/regular/master/dist/regular.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>你可以直接保存成index.html来查看效果,也直接在<a href="http://codepen.io/leeluolee/pen/EuHcd" target="_blank" rel="external">codepen中查看</a></p>
<h2 id="第二步:_视图(模板)与数据model分离">第二步: 视图(模板)与数据model分离</h2>
<p>按以往的经验，我们应该使用jQuery等框架来一个个绑定节点处理业务逻辑了.这样会带来很多的问题，一旦你去绑定了大量的dom事件和进行了过多的dom操作，往往会带你进入难以维护的深渊，我们可以使用模板来强制将model(模型)与视图(view)分开。</p>
<p>所以这一步，我们什么都不做，仅仅只是将上面的静态页面转由regularjs模板生成.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"todoapp"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">'template/regular'</span> <span class="attribute">id</span>=<span class="value">'todomvc'</span>&gt;</span><span class="javascript"></span></div><div class="line">  &lt;div&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>TODOMVC<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"new-todo"</span> <span class="attribute">placeholder</span>=<span class="value">"What needs to be done?"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"main"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"toggle-all"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"toggle-all"</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"todo-list"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"completed"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"view"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">input</span> <span class="attribute">class</span>=<span class="value">"toggle"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">checked</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">label</span>&gt;</span>sleep<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"edit"</span> <span class="attribute">class</span>=<span class="value">"edit"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">""</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"view"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">input</span> <span class="attribute">class</span>=<span class="value">"toggle"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">label</span>&gt;</span>work<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"edit"</span> <span class="attribute">class</span>=<span class="value">"edit"</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">section</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">footer</span> <span class="attribute">id</span>=<span class="value">"footer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"todo-count"</span>&gt;</span> <span class="tag">&lt;<span class="title">strong</span>&gt;</span>1<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></div><div class="line">      item left</div><div class="line">    <span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"filters"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span> <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"selected"</span>&gt;</span>All<span class="tag">&lt;/<span class="title">a</span>&gt;</span> <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span> <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">""</span>&gt;</span>Active<span class="tag">&lt;/<span class="title">a</span>&gt;</span> <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span> <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">""</span>&gt;</span>Completed<span class="tag">&lt;/<span class="title">a</span>&gt;</span> <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"clear-completed"</span>&gt;</span>Clear completed (1)<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">footer</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>然后我们利用regularjs来compile这个模板</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> TodoMVC = Regular.extend({</div><div class="line">    template: <span class="string">"#todomvc"</span></div><div class="line">})</div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> TodoMVC({data: {}}).$inject(<span class="string">'#todoapp'</span>);</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>在codepen中查看结果</p>
<p>其中<code>Regular.extend</code>用于定义一个组件，最基本的情况就是指定一个模板(template字段)，而<code>new TodoMVC</code>相当于是compile这个组件，一般我们会在这里传入<code>data</code>模型，我们同时将compile后的组件插入到节点<code>#todoapp</code>中.</p>
<p>事实上大家都发现了，这里我们完全没有做额外的逻辑，但是这是将view与model分开的关键一步.</p>
<p><a href="http://codepen.io/leeluolee/pen/xvCjm" target="_blank" rel="external">DEMO2</a></p>
<h2 id="第三步:_使用#list指令来处理列表">第三步: 使用#list指令来处理列表</h2>
<p>我们发现，很明显的model可以抽象成一份todos的数组，所以我们的第一步是使用list来处理列表逻辑(这里我们省略了其余部分的模板，只列出了li部分的逻辑)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">'template/regular'</span> <span class="attribute">id</span>=<span class="value">'todomvc'</span>&gt;</span><span class="javascript"></span></div><div class="line">....</div><div class="line">{{#list todos as todo}}</div><div class="line">&lt;li  r-<span class="keyword">class</span>=<span class="string">"{'completed': todo.completed, 'editing': todo.editing}"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"view"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">class</span>=<span class="value">"toggle"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">r-model</span>=<span class="value">{{</span> <span class="attribute">todo.completed</span> }}&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">label</span> <span class="attribute">on-dblclick</span>=<span class="value">{{todo.editing</span> = <span class="attribute">true</span>}}&gt;</span>{{ todo.description }}<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">on-click</span>=<span class="value">{{</span> <span class="attribute">todos.splice</span>(<span class="attribute">todo_index</span>,<span class="attribute">1</span>) }} <span class="attribute">class</span>=<span class="value">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"edit"</span> <span class="attribute">class</span>=<span class="value">"edit"</span> <span class="attribute">on-enter</span>=<span class="value">{{</span> <span class="attribute">todo.editing</span> = <span class="attribute">false</span> }} <span class="attribute">r-model</span>=<span class="value">{{todo.description}}</span> <span class="attribute">autofocus</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">{{/list}}</div><div class="line"></div><div class="line">.....</div><div class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span></div></pre></td></tr></table></figure>

<p>list规则用于处理循环逻辑，完整描述可以查看<a href="http://regularjs.github.io/guide/zh/syntax/list.html" target="_blank" rel="external">Regularjs指南的list部分</a>。 这里我们也应用到了最基础的<a href="http://regularjs.github.io/guide/zh/syntax/inteplation.html" target="_blank" rel="external">插值</a>(<code>{{}}</code>)</p>
<p>我们传入一个todos的假数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> todos = [</div><div class="line">    {completed: <span class="literal">true</span>, description: <span class="string">"sleep"</span> },</div><div class="line">    {completed: <span class="literal">false</span>, description: <span class="string">"work"</span> }</div><div class="line">]</div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> TodoMVC({</div><div class="line">    data: {todos: todos}</div><div class="line">}).$inject(<span class="string">"#todoapp"</span>)</div></pre></td></tr></table></figure>

<p><a href="http://codepen.io/leeluolee/pen/krzjc" target="_blank" rel="external">DEMO3</a></p>
<p>可以看到我们同时利用directive处理了一些业务逻辑</p>
<ol>
<li><code>r-class</code>： 属于对象表达式，每当值为真，添加对应的键作为class</li>
<li><code>r-model</code>: 使表单项与某字段形成双向绑定</li>
<li><code>on-xx</code>: 绑定事件</li>
</ol>
<p>regularjs的parse是基于字符串的，它输出包含完整信息的ast给基于dom的compiler使用，这样其实输出的内容是不会包含一些常规dom-based模板的placeholder信息的(比如angular的<code>ng-xx</code>).</p>
<p>到这一步，其实可以发现，我们可以处理一部分业务逻辑了，比如</p>
<ol>
<li>双击编辑</li>
<li>回车完成编辑</li>
<li>标记完成</li>
<li>删除指定的todo项(利用todo_index下标，它的命名取决于你定义的列表项的名称加<code>_index</code>)</li>
</ol>
<p>regularjs的数据驱动是基于代码脏检查的(与angular一致)，所以你可以直接操作裸数据来完成状态变更.</p>
<h2 id="第四步：_完善我们的组件业务逻辑">第四步： 完善我们的组件业务逻辑</h2>
<p>目前，除了中间列表部分的view，其它部分的数据都没有完成数据联动. 我们遗留的业务逻辑有:</p>
<ol>
<li>点击下方的<code>All Active Completed</code>面板要完成todos面板的切换来分别显示所有、未完成、完成的todo列表</li>
<li>上面的input可以进行新建todo</li>
<li>切换左上角的checkbox可以进行标记全部和取消编辑全部的操作</li>
<li>点击右下角的clearComplete 应该可以删除所有完成的列表项</li>
</ol>
<p>一个组件的业务逻辑(对于一个mvvm模式的组件来讲，业务逻辑应该是纯数据操作)应该是在定义时就进行确定. 我们在extend时定义这些业务.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> TodoMVC = Regular.extend({</div><div class="line">    template: <span class="string">'#todomvc'</span>,</div><div class="line">    <span class="comment">// get the list;</span></div><div class="line">    getList: <span class="function"><span class="keyword">function</span><span class="params">(filter)</span></span>{</div><div class="line">      <span class="keyword">if</span>(!filter || filter === <span class="string">'all'</span>) <span class="keyword">return</span> <span class="keyword">this</span>.data.todos;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">this</span>.data.todos.filter(<span class="function"><span class="keyword">function</span><span class="params">(item)</span></span>{</div><div class="line">        <span class="keyword">return</span> filter === <span class="string">'completed'</span>? item.completed : !item.completed;</div><div class="line">      });</div><div class="line">    },</div><div class="line">    <span class="comment">// toggle all todo's completed state</span></div><div class="line">    toggleAll: <span class="function"><span class="keyword">function</span><span class="params">(sign)</span></span>{</div><div class="line">      <span class="keyword">this</span>.data.todos.forEach(<span class="function"><span class="keyword">function</span><span class="params">(item)</span></span>{</div><div class="line">        <span class="keyword">return</span> item.completed = !sign;</div><div class="line">      });</div><div class="line">    },</div><div class="line">    <span class="comment">// clear all compleled</span></div><div class="line">    clearCompleted: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">      <span class="keyword">this</span>.data.todos = <span class="keyword">this</span>.data.todos.filter(<span class="function"><span class="keyword">function</span><span class="params">(item)</span></span>{</div><div class="line">        <span class="keyword">return</span> !item.completed</div><div class="line">      });</div><div class="line">    },</div><div class="line">    <span class="comment">// create a new todo</span></div><div class="line">    newTodo: <span class="function"><span class="keyword">function</span><span class="params">(editTodo)</span></span>{</div><div class="line">      <span class="keyword">var</span> data = <span class="keyword">this</span>.data;</div><div class="line">      data.todos.unshift({description: editTodo});</div><div class="line">      data.editTodo = <span class="string">""</span>;</div><div class="line">    }</div><div class="line">})</div></pre></td></tr></table></figure>

<p>至此，TodoMVC实现了以下4个对应逻辑</p>
<ol>
<li>getList(sign): 用于获得不同的列表</li>
<li>newTodo(editTodo): 用于创建新的todo</li>
<li>toggleAll(sign): 用于全部标注完成，和全部取消</li>
<li>clearCompleted(): 用于删除所有完成的todo</li>
</ol>
<p>大家可以发现，所有的操作都是基于裸数据的业务逻辑，没有添加任何dom操作。</p>
<p>但是如何使用这些函数定义呢？</p>
<p>很简单，首先extend的函数是定义在组件原型上的，其次模板中的this是指向组件实例，即：</p>
<p>我们可以通过this.xx()等方式在模板中调用这些逻辑定义。完整模板我们修改为</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>regular-todo<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"new-todo"</span> </span></div><div class="line">    <span class="attribute">on-enter</span>=<span class="value">{{</span> <span class="attribute">this.newTodo</span>(<span class="attribute">editTodo</span>) }} </div><div class="line">    <span class="attribute">placeholder</span>=<span class="value">"What needs to be done?"</span> </div><div class="line">    <span class="attribute">r-model</span>=<span class="value">{{</span> <span class="attribute">editTodo</span> }}&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"main"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"toggle-all"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> </span></div><div class="line">    <span class="attribute">on-change</span>=<span class="value">{{this.toggleAll(items.length</span> =<span class="value">==</span> <span class="attribute">this.getList</span>('<span class="attribute">completed</span>')<span class="attribute">.length</span>)}} </div><div class="line">    <span class="attribute">checked</span>=<span class="value">{{items.length</span> =<span class="value">==</span> <span class="attribute">this.getList</span>('<span class="attribute">completed</span>')<span class="attribute">.length</span> }}&gt;</div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"toggle-all"</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"todo-list"</span>&gt;</span></div><div class="line">    {{#list this.getList(filter) as todo}}</div><div class="line">    <span class="tag">&lt;<span class="title">li</span>  <span class="attribute">r-class</span>=<span class="value">"{'completed': todo.completed, 'editing': todo.editing}"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"view"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">class</span>=<span class="value">"toggle"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">r-model</span>=<span class="value">{{</span> <span class="attribute">todo.completed</span> }}&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">label</span> <span class="attribute">on-dblclick</span>=<span class="value">{{todo.editing</span> = <span class="attribute">true</span>}}&gt;</span></div><div class="line">            {{ todo.description }}</div><div class="line">        <span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">button</span> </span></div><div class="line">            <span class="attribute">on-click</span>=<span class="value">{{</span> <span class="attribute">todos.splice</span>(<span class="attribute">todo_index</span>,<span class="attribute">1</span>) }} <span class="attribute">class</span>=<span class="value">"destroy"</span>&gt;<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"edit"</span> <span class="attribute">class</span>=<span class="value">"edit"</span> </span></div><div class="line">        <span class="attribute">on-enter</span>=<span class="value">{{</span> <span class="attribute">todo.editing</span> = <span class="attribute">false</span> }} </div><div class="line">        <span class="attribute">r-model</span>=<span class="value">{{todo.description}}</span> <span class="attribute">autofocus</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    {{/list}}</div><div class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">footer</span> <span class="attribute">id</span>=<span class="value">"footer"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"todo-count"</span>&gt;</span> <span class="tag">&lt;<span class="title">strong</span>&gt;</span>{{ this.getList('active').length }}<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></div><div class="line">    {{ this.getList('active').length === 1 ? 'item' : 'items' }} left</div><div class="line">  <span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"filters"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"{{ filter === 'all'? 'selected' : '' }}"</span>  <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">on-click</span>=<span class="value">{{filter='all'}}</span>&gt;</span>All<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"{{ filter === 'active'? 'selected' : '' }}"</span> <span class="attribute">href</span>=<span class="value">'javascript:;'</span> <span class="attribute">on-click</span>=<span class="value">{{filter</span> = '<span class="attribute">active</span>'}}&gt;</span>Active<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"{{ filter === 'completed'? 'selected' : '' }}"</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">on-click</span>=<span class="value">{{filter</span> = '<span class="attribute">completed</span>'}}&gt;</span>Completed<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"clear-completed"</span> <span class="attribute">on-click</span>=<span class="value">{{this.clearCompleted()}}</span>&gt;</span>Clear completed ({{ this.getList('completed').length }})<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">footer</span>&gt;</span></div></pre></td></tr></table></figure>

<p><a href="http://codepen.io/leeluolee/pen/mcHxw" target="_blank" rel="external">DEMO3</a></p>
<h2 id="第五步：_使用计算属性来简化我们的表达式">第五步： 使用计算属性来简化我们的表达式</h2>
<p>这里我们发现，使用了大量的相似的表达式在我们的模板里，比如为了处理全选与反选，我们引入有如此肮脏的模板代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"toggle-all"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> </span></div><div class="line">   <span class="attribute">on-change</span>=<span class="value">{{this.toggleAll(items.length</span> =<span class="value">==</span> <span class="attribute">this.getList</span>('<span class="attribute">completed</span>')<span class="attribute">.length</span>)}} </div><div class="line">   <span class="attribute">checked</span>=<span class="value">{{items.length</span> =<span class="value">==</span> <span class="attribute">this.getList</span>('<span class="attribute">completed</span>')<span class="attribute">.length</span> }}&gt;</div></pre></td></tr></table></figure>

<p>如果我们引入计算属性(computed-property)就可以简化此表达式</p>
<p>我们可以extend时进行计算属性的定义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> TodoMVC = Regular.extend({</div><div class="line">    template: <span class="string">"#todomvc"</span>,</div><div class="line">    computed: {</div><div class="line">      completedLength: <span class="string">"this.getList('completed').length"</span>,</div><div class="line">      activeLength: <span class="string">"this.getList('active').length"</span>,</div><div class="line">      allCompleted: {</div><div class="line">        get: <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>{</div><div class="line">          <span class="keyword">return</span> data.todos.length === <span class="keyword">this</span>.getList(<span class="string">'completed'</span>).length</div><div class="line">        },</div><div class="line">        set: <span class="function"><span class="keyword">function</span><span class="params">(sign,data)</span></span>{</div><div class="line">          data.todos.forEach(<span class="function"><span class="keyword">function</span><span class="params">(item)</span></span>{</div><div class="line">            item.completed = sign;</div><div class="line">          })</div><div class="line">        }</div><div class="line">      }</div><div class="line">    }</div><div class="line">    <span class="comment">//....other methods...</span></div><div class="line">})</div></pre></td></tr></table></figure>

<p>在这里我们定义三个计算属性</p>
<ol>
<li>completedLength: 代表完成的todo的length</li>
<li>activeLength： 代表未完成的Length，这里可以看到1和2属性，我们都直接传入了一个字符串表达式，因为这里只需要处理读操作，即只是表达式的一种简写替代</li>
<li>allCompleted: 标记是否全部完成，为真则将左上的checkbox打钩。需要注意的是这里还设置了setter函数，用于处理allCompelted的写操作，这里我们做的是，将所有todo标记完成或未完成</li>
</ol>
<p>修改后的模板如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>regular-todo<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"new-todo"</span> <span class="attribute">on-enter</span>=<span class="value">{{</span> <span class="attribute">this.newTodo</span>(<span class="attribute">editTodo</span>) }} <span class="attribute">placeholder</span>=<span class="value">"What needs to be done?"</span> <span class="attribute">r-model</span>=<span class="value">{{</span> <span class="attribute">editTodo</span> }}&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"main"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"toggle-all"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">'toggle'</span> <span class="attribute">r-model</span>=<span class="value">'allCompleted'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"toggle-all"</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"todo-list"</span>&gt;</span></div><div class="line">    {{#list this.getList(filter) as todo}}</div><div class="line">    <span class="tag">&lt;<span class="title">li</span>  <span class="attribute">r-class</span>=<span class="value">"{'completed': todo.completed, 'editing': todo.editing}"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"view"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">class</span>=<span class="value">"toggle"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">r-model</span>=<span class="value">{{</span> <span class="attribute">todo.completed</span> }}&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">label</span> <span class="attribute">on-dblclick</span>=<span class="value">{{todo.editing</span> = <span class="attribute">true</span>}}&gt;</span>{{ todo.description }}<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">on-click</span>=<span class="value">{{</span> <span class="attribute">todos.splice</span>(<span class="attribute">todo_index</span>,<span class="attribute">1</span>) }} <span class="attribute">class</span>=<span class="value">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"edit"</span> <span class="attribute">class</span>=<span class="value">"edit"</span><span class="value">on-enter={{</span> <span class="attribute">todo.editing</span> = <span class="attribute">false</span> }} <span class="attribute">r-model</span>=<span class="value">{{todo.description}}</span> <span class="attribute">autofocus</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    {{/list}}</div><div class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">footer</span> <span class="attribute">id</span>=<span class="value">"footer"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"todo-count"</span>&gt;</span> <span class="tag">&lt;<span class="title">strong</span>&gt;</span>{{ activeLength }}<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></div><div class="line">    {{ activeLength === 1 ? 'item' : 'items' }} left</div><div class="line">  <span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"filters"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"{{ filter === 'all'? 'selected' : '' }}"</span>  <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">on-click</span>=<span class="value">{{filter='all'}}</span>&gt;</span>All<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"{{ filter === 'active'? 'selected' : '' }}"</span> <span class="attribute">href</span>=<span class="value">'javascript:;'</span> <span class="attribute">on-click</span>=<span class="value">{{filter</span> = '<span class="attribute">active</span>'}}&gt;</span>Active<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"{{ filter === 'completed'? 'selected' : '' }}"</span> <span class="attribute">href</span>=<span class="value">"javascript:;"</span> <span class="attribute">on-click</span>=<span class="value">{{filter</span> = '<span class="attribute">completed</span>'}}&gt;</span>Completed<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"clear-completed"</span> <span class="attribute">on-click</span>=<span class="value">{{this.clearCompleted()}}</span> &gt;</span>Clear completed ({{ completedLength }})<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="title">footer</span>&gt;</span></div></pre></td></tr></table></figure>

<p>至此，我们利用大约40行模板+50行代码实现了todomvc. 并且完全没有掺入dom操作，完全是按照以前使用模板的思维。</p>
<h2 id="第六步:_使用if/else来控制区域的创建与回收">第六步: 使用if/else来控制区域的创建与回收</h2>
<p>按照todomvc的规范定义，我们遗漏了以下两个逻辑</p>
<ol>
<li>需要在没有todos的情况隐藏显示部分，</li>
<li>并且在没有可清楚todo的情况下，隐藏</li>
</ol>
<p>我们可以利用两种方式来实现</p>
<ol>
<li><a href="http://regularjs.github.io/guide/zh/syntax/if.html" target="_blank" rel="external">{{#if}}</a>: 这种情况会将区域完全回收，并移除所有绑定，这是一种语法元素。</li>
<li><a href="http://regularjs.github.io/guide/zh/core/directive.html#4-r-hide-" target="_blank" rel="external">r-hide</a>: 你也可以使用指令来切换节点的可见性，这只是一种指令增强。</li>
</ol>
<p>1相较于2，最大的不同是完整回收，并且可以作用于任意的块: 比如多个并列节点。而2只能以节点为单位(即类似与angular的ng-show)</p>
<p>这里我们采用if来完成我们的需求.修改后的模板如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">{{#if !!todos.length}}</div><div class="line"><span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"main"</span>&gt;</span></div><div class="line">...ignored for short...</div><div class="line"><span class="tag">&lt;/<span class="title">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">footer</span> <span class="attribute">id</span>=<span class="value">"footer"</span>&gt;</span></div><div class="line">  ...ignored for short...</div><div class="line">  {{#if completedLength}}</div><div class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"clear-completed"</span> <span class="attribute">on-click</span>=<span class="value">{{this.clearCompleted()}}</span> &gt;</span>Clear completed ({{ completedLength }})<span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">  {{/if}}</div><div class="line"><span class="tag">&lt;/<span class="title">footer</span>&gt;</span></div><div class="line">{{/if}}</div></pre></td></tr></table></figure>

<p><a href="http://codepen.io/leeluolee/pen/mcHxw" target="_blank" rel="external">DEMO5</a></p>
<h2 id="第七步:_抽离子组件">第七步: 抽离子组件</h2>
<p>到目前为止，除了路由部分，我们已经完整实现了整个组件(由于regularjs定义为一个类库，所以不提供框架级的路由服务，大家可以通过类似directorjs等第三方库来实现路由).</p>
<p>但是所有的view都写在了一个模板中，这个不利用后续的重构。我们可以通过子组件来提取一些独立的逻辑，在这个例子里，一个todo项目显然可以独立出来成为一个组件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">li</span>  <span class="attribute">r-class</span>=<span class="value">"{'completed': todo.completed, 'editing': todo.editing}"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"view"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">class</span>=<span class="value">"toggle"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">r-model</span>=<span class="value">{{</span> <span class="attribute">todo.completed</span> }}&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">on-dblclick</span>=<span class="value">{{todo.editing</span> = <span class="attribute">true</span>}}&gt;</span>{{ todo.description }}<span class="tag">&lt;/<span class="title">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">on-click</span>=<span class="value">"remove"</span> <span class="attribute">class</span>=<span class="value">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="title">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"edit"</span> <span class="attribute">class</span>=<span class="value">"edit"</span><span class="value">on-enter={{</span> <span class="attribute">todo.editing</span> = <span class="attribute">false</span> }} <span class="attribute">r-model</span>=<span class="value">{{todo.description}}</span> <span class="attribute">autofocus</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">li</span>&gt;</span></div></pre></td></tr></table></figure>

<p>注意这里的<code>on-click=&#39;remove&#39;</code> 代表点击后抛出自定义事件<code>remove</code>, 你可以捕获这个事件来处理删除操作(因为我们无法获得todos数据了)</p>
<p>对应的组件定义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Todo = Regular.extend({</div><div class="line">  data: {todo: {}},</div><div class="line">  name: <span class="string">"todo"</span>,</div><div class="line">  template: <span class="string">"#todo"</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>注意<code>name</code>参数代表，这个组件可以通过<code>&lt;todo &gt;&lt;/todo&gt;</code>的方式插入其它模板中。</p>
<p>重构之前的list部分</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">{{#list this.getList(filter) as todo}}</div><div class="line">    <span class="tag">&lt;<span class="title">todo</span> <span class="attribute">todo</span>=<span class="value">{{todo}}</span> <span class="attribute">on-remove</span>=<span class="value">{{todos.splice(todo_index,1)}}</span> &gt;</span><span class="tag">&lt;/<span class="title">todo</span>&gt;</span></div><div class="line">{{/list}}</div></pre></td></tr></table></figure>

<p>这里我们直接通过on-remove来捕获子组件抛出的<code>remove</code>事件.</p>
<p>很明显的看到，利用子组件和持续重构可以帮助我们维护越来越复杂的组件关系. </p>
<p><a href="http://codepen.io/leeluolee/pen/dGxCb" target="_blank" rel="external">DEMO6</a></p>
<h2 id="结尾">结尾</h2>
<p>至此，我们在仅40行模板+50行js代码(纯数据的业务操作)实现了一个功能基本完整的组件，并且没有引入任何dom操作.</p>
<p>如果有兴趣，可以查看regularjs的官网 <a href="http://regularjs.github.io/" target="_blank" rel="external">http://regularjs.github.io/</a> 查看更完整的例子。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2>
<p>现在市面上充斥了越来越多的javascript框架，给开发者的技术选型带来极大的选择成本，<a href="http://todomvc.com/" target="_blank" rel="external">todomvc</a>在这个环境下应运而生. </p>
<p>由于todomvc有一个完整的实现定义，它复杂度适中，大概就是平时开发的一个组件的功能复杂度，开发者可以轻松对各个框架的代码做对比，同时由于功能一致，也可以进行各框架之间的<a href="http://regularjs.github.io/perf/todomvc-benchmark/index.html" target="_blank" rel="external">性能对比(当然这个测试案例其实并没有很大的实际意义)</a>. </p>
<p><img src="http://todomvc.com/site-assets/screenshot.png" alt="todomvc"></p>
]]>
    
    </summary>
    
      <category term="javascript" scheme="http://leeluolee.github.com/tags/javascript/"/>
    
      <category term="regularjs" scheme="http://leeluolee.github.com/tags/regularjs/"/>
    
      <category term="tutorial" scheme="http://leeluolee.github.com/categories/tutorial/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GitBook, Git + Markdown 快速发布你的书籍]]></title>
    <link href="http://leeluolee.github.com/2014/07/22/2014-07-22-gitbook-guide/"/>
    <id>http://leeluolee.github.com/2014/07/22/2014-07-22-gitbook-guide/</id>
    <published>2014-07-22T07:39:17.000Z</published>
    <updated>2015-04-06T13:59:36.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://www.gitbook.io/" target="_blank" rel="external">gitbook</a>是一个用于发布个人书籍的平台，类似于国外著名的LeanPub. 其中一个很大的特点是它利用git作为版本管理和发布工具, 加上是在线形式，你可以很方便的进行作为的快速更新. </p>
<a id="more"></a>
<p>gitbook提供了一个简单的命令行工具<code>gitbook</code>用来编译和预览的书籍.</p>
<p><a href="https://nodei.co/npm/gitbook/" target="_blank" rel="external"><img src="https://nodei.co/npm/gitbook.png?downloads=true&amp;stars=true" alt="NPM"></a></p>
<h2 id="安装">安装</h2>
<p>你可以直接通过npm安装gitbook到全局</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> -g gitbook</span></div></pre></td></tr></table></figure>

<p>gitbook只提供了如下四个命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ <span class="tag">gitbook</span> <span class="tag">-h</span></div><div class="line"><span class="tag">Usage</span>: <span class="tag">gitbook</span> <span class="attr_selector">[options]</span> <span class="attr_selector">[command]</span></div><div class="line"></div><div class="line"><span class="tag">Commands</span>:</div><div class="line"></div><div class="line"><span class="tag">build</span> <span class="attr_selector">[options]</span> <span class="attr_selector">[source_dir]</span> 编译指定目录，输出<span class="tag">Web</span>格式(_<span class="tag">book</span>文件夹中)</div><div class="line"><span class="tag">serve</span> <span class="attr_selector">[options]</span> <span class="attr_selector">[source_dir]</span> 监听文件变化并编译指定目录，同时会创建一个服务器用于预览<span class="tag">Web</span></div><div class="line"><span class="tag">pdf</span> <span class="attr_selector">[options]</span> <span class="attr_selector">[source_dir]</span> 编译指定目录，输出<span class="tag">PDF</span></div><div class="line"><span class="tag">epub</span> <span class="attr_selector">[options]</span> <span class="attr_selector">[source_dir]</span> 编译指定目录，输出<span class="tag">epub</span></div><div class="line"><span class="tag">mobi</span> <span class="attr_selector">[options]</span> <span class="attr_selector">[source_dir]</span> 编译指定目录，输出<span class="tag">mobi</span></div><div class="line"><span class="tag">init</span> <span class="attr_selector">[source_dir]</span>   通过<span class="tag">SUMMARY</span><span class="class">.md</span>生成作品目录</div><div class="line"></div><div class="line"><span class="tag">Options</span>:</div><div class="line"></div><div class="line"><span class="tag">-h</span>, <span class="tag">--help</span>     <span class="tag">output</span> <span class="tag">usage</span> <span class="tag">information</span></div><div class="line"><span class="tag">-V</span>, <span class="tag">--version</span>  <span class="tag">output</span> <span class="tag">the</span> <span class="tag">version</span> <span class="tag">number</span></div></pre></td></tr></table></figure>

<h2 id="书写">书写</h2>
<p>就以我为 <a href="http://regularjs.github.io" target="_blank" rel="external">regularjs</a> 写的 <a href="http://regularjs.github.io/guide/" target="_blank" rel="external">指南</a>为例，一份gitbook的源文件目录一般是这样的.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ tree -L <span class="number">2</span> -U</div><div class="line"></div><div class="line">├── _book</div><div class="line">│   ├── <span class="built_in">index</span>.html</div><div class="line">│   ├── <span class="keyword">en</span></div><div class="line">│   ├── gitbook</div><div class="line">│   └── zh</div><div class="line">├── node_modules</div><div class="line">│   ├── gulp</div><div class="line">│   └── gulp-gh-pages</div><div class="line">├── <span class="keyword">en</span></div><div class="line">│   ├── <span class="keyword">syntax</span></div><div class="line">│   ├── core</div><div class="line">│   ├── getting-start</div><div class="line">│   ├── advanced</div><div class="line">│   ├── SUMMARY.md</div><div class="line">│   ├── README.md</div><div class="line">│   ├── introduct</div><div class="line">│   └── <span class="keyword">qa</span></div><div class="line">├── zh</div><div class="line">│   ├── <span class="keyword">syntax</span></div><div class="line">│   ├── core</div><div class="line">│   ├── getting-start</div><div class="line">│   ├── advanced</div><div class="line">│   ├── SUMMARY.md</div><div class="line">│   ├── README.md</div><div class="line">│   └── introduct</div><div class="line">├── LANGS.md</div><div class="line">├── cover_small.png</div><div class="line">├── gulpfile.js</div><div class="line">├── package.json</div><div class="line">├── book.json</div><div class="line">└── README.md</div></pre></td></tr></table></figure>

<p><strong>几个关键文件的说明</strong></p>
<ul>
<li><strong>LANGS.md</strong><br>当你需要发布多个语言版本时，根目录只需要放置一个LANGS.md, 格式如下</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>[<span class="link_label">English</span>](<span class="link_url">en</span>)</div><div class="line"><span class="bullet">* </span>[<span class="link_label">中文</span>](<span class="link_url">zh</span>)</div><div class="line"><span class="bullet">* </span>...</div></pre></td></tr></table></figure>

<p>  每个zh，en文件夹现在就相当于一个独立的书籍.</p>
<ul>
<li>README.md<br>REAME相当于书籍的前言部分, 可以忽略</li>
<li><p>cover_small.png 和 cover.png<br>书籍的封面图</p>
</li>
<li><p><strong>SUMMARY.md</strong><br>SUMMARY是最重要的一个部分, 它创建的是整书的索引, 你也可以通过<code>gitbook init</code>读取<code>SUMMARY.md</code>来生成目录结构. 格式如下</p>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>[<span class="link_label">前言</span>](<span class="link_url">introduct/README.md</span>)</div><div class="line">  - [<span class="link_label">API索引</span>](<span class="link_url">introduct/index.md</span>)</div><div class="line"><span class="bullet">* </span>[<span class="link_label">你好 Regular</span>](<span class="link_url">getting-start/README.md</span>)</div><div class="line">  - [<span class="link_label">安装</span>](<span class="link_url">getting-start/install.md</span>)</div><div class="line">  - [<span class="link_label">快速起步</span>](<span class="link_url">getting-start/quirk-example.md</span>)</div><div class="line">  - [<span class="link_label">小结</span>](<span class="link_url">getting-start/review.md</span>)</div><div class="line"><span class="bullet">* </span>[<span class="link_label">内建模板引擎</span>](<span class="link_url">syntax/README.md</span>)</div><div class="line">  - [<span class="link_label">语法说明</span>](<span class="link_url">syntax/syntax.md</span>)</div><div class="line">  - [<span class="link_label">插值</span>](<span class="link_url">syntax/inteplation.md</span>)</div><div class="line">  - [<span class="link_label">逻辑控制</span>](<span class="link_url">syntax/if.md</span>)</div><div class="line">  - [<span class="link_label">循环控制</span>](<span class="link_url">syntax/list.md</span>)</div><div class="line">  - [<span class="link_label">动态引入</span>](<span class="link_url">syntax/include.md</span>)</div><div class="line">  - [<span class="link_label">表达式</span>](<span class="link_url">syntax/expression.md</span>)</div><div class="line">  - [<span class="link_label">小节</span>](<span class="link_url">syntax/review.md</span>)</div><div class="line"><span class="bullet">* </span>[<span class="link_label">核心概念</span>](<span class="link_url">core/README.md</span>)</div><div class="line">  - [<span class="link_label">类式继承和组件定义</span>](<span class="link_url">core/class.md</span>)</div><div class="line">  - [<span class="link_label">数据监听</span>](<span class="link_url">core/binding.md</span>)</div><div class="line">  - [<span class="link_label">directive——指令</span>](<span class="link_url">core/directive.md</span>)</div><div class="line">  - [<span class="link_label">filter——过滤器</span>](<span class="link_url">core/filter.md</span>)</div><div class="line">  - [<span class="link_label">event——ui事件体系</span>](<span class="link_url">core/event.md</span>)</div><div class="line">  - [<span class="link_label">regular的模块化策略</span>](<span class="link_url">core/use.md</span>)</div><div class="line">  - [<span class="link_label">简单事件发射器emitter</span>](<span class="link_url">core/message.md</span>)</div><div class="line">  - [<span class="link_label">小节</span>](<span class="link_url">core/review.md</span>)</div><div class="line"><span class="bullet">* </span>[<span class="link_label">高级特性</span>](<span class="link_url">advanced/README.md</span>)</div><div class="line">  - [<span class="link_label">内嵌组件</span>](<span class="link_url">advanced/component.md</span>)</div><div class="line">  - [<span class="link_label">regular的transclude</span>](<span class="link_url">advanced/content.md</span>)</div><div class="line">  - [<span class="link_label">小节</span>](<span class="link_url">advanced/review.md</span>)</div></pre></td></tr></table></figure>

<p>接下来就是依次完成你每个章节的书写了, 你需要开启<code>gitbook serve .</code>来进行实时的web预览(服务器默认为<code>localhost:400</code>)</p>
<p>markdown的标准格式可以看<a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">这里</a>，现在的程序圈的markdown包括gitbook普遍使用的是<a href="https://help.github.com/articles/github-flavored-markdown" target="_blank" rel="external">GitHub Flavored Markdown</a>，除了github中已经说明的那些, 它还支持一些额外的小特性, 比如<code>[x]</code>可以用来设置一个checkbox来实现todolist的功能.</p>
<h2 id="发布">发布</h2>
<p>gitbook的命令行工具不提供对发布操作的支持，你可以直接使用<code>git</code>发布，首先你需要添加gitbook的仓库作为你的一个远程库. 比如regularjs的路径为</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git remote <span class="keyword">add</span> gitbook https://<span class="keyword">push</span>.gitbook.io/leeluolee/regular-guide.git</div><div class="line"></div><div class="line">git <span class="keyword">push</span> gitbook master</div></pre></td></tr></table></figure>

<p>在push成功后，gitbook.io会自动在服务端进行build. 你可以在gitbook.io的个人主页上查看到build信息.</p>
<h2 id="常见问题">常见问题</h2>
<ol>
<li><p>gitbook 好卡啊 我可以发布到我的个人网站吗?<br>当然可以，<code>gitbook build</code>之后的<code>_book</code> 就是一个完整的web目录, 你可以放置到你的个人网站上.</p>
<p>一个更好的做法是直接发布到github的gh-pages上, 由于gitbook每次build都会重新生成整个目录.所以你需要利用<code>gulp-gh-pages</code>或<code>grunt-gh-pages</code>等工具进行发布.  </p>
<p>你可以参考我的<a href="https://github.com/regularjs/guide/tree/master" target="_blank" rel="external">做法</a>, 这样一键<code>gulp deploy</code>可以完成指定目录<code>_book</code>发布gh-pages.</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://www.gitbook.io/" target="_blank" rel="external">gitbook</a>是一个用于发布个人书籍的平台，类似于国外著名的LeanPub. 其中一个很大的特点是它利用git作为版本管理和发布工具, 加上是在线形式，你可以很方便的进行作为的快速更新. </p>
]]>
    
    </summary>
    
      <category term="npm" scheme="http://leeluolee.github.com/tags/npm/"/>
    
      <category term="tool" scheme="http://leeluolee.github.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LESS to MCSS 指南]]></title>
    <link href="http://leeluolee.github.com/2013/08/05/less-to-mcss/"/>
    <id>http://leeluolee.github.com/2013/08/05/less-to-mcss/</id>
    <published>2013-08-05T13:40:04.000Z</published>
    <updated>2015-04-06T13:59:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>虽然首页没有开始做，昨天仍决定将<a href="https://github.com/NetEaseWD/mcss" target="_blank" rel="external">MCSS</a>从身边的基友们开始向杭研推广了，从开始做这个直到现在推广遇到最多的问题是：</p>
<blockquote>
<p><strong>不是有LESS了吗？</strong></p>
</blockquote>
<p>这个问题回答了很多遍了，但是觉得回答的都不够好，所以觉得写一篇文章解释一下。其实很多答案也都可以从基于MCSS封装的函数库<a href="https://github.com/leeluolee/mass" target="_blank" rel="external">mass</a>中得到解答，本文针对MCSS的例子都可以在这个<a href="http://leeluolee.github.io/mcss/" target="_blank" rel="external">Try-Page</a>中进行尝试。</p>
<a id="more"></a>
<hr>
<h2 id="LESS特性在MCSS中的对应">LESS特性在MCSS中的对应</h2>
<p>首先解答下LESS的特性在MCSS中的对应，这几乎也囊括了在实际生产使用时的80%的功能(实际生产并不包含基础类库封装)</p>
<h3 id="1-_嵌套">1. 嵌套</h3>
<p>MCSS与LESS等其它预处理器的嵌套规则完全一致，支持<code>&amp;</code>占位符，例如:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.m-home{</div><div class="line">    display: block;</div><div class="line">    div, ul{</div><div class="line">        + div{</div><div class="line">            margin-top: 20px;</div><div class="line">        }</div><div class="line">        border: 2px solid #ccc;</div><div class="line">        &gt; a{</div><div class="line">            color: #fff;</div><div class="line">            &:hover{</div><div class="line">               text-decoration: none; </div><div class="line">            }</div><div class="line">            ~ span{</div><div class="line">                display: block;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>MCSS同时支持另一个占位符<code>%</code>，与<code>&amp;</code>类似，但它不包含顶级的选择器</p>
<p>比如有时候，我们需要在<code>.ms-form</code>的扩展类<code>.ms-form-stack</code>中修改某层节点的样式，这时我们不需要重新重复一次书写，例如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.ms-form{</div><div class="line">    input[<span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span>],</div><div class="line">    input[<span class="class"><span class="keyword">type</span></span>=<span class="string">"password"</span>],</div><div class="line">    input[<span class="class"><span class="keyword">type</span></span>=<span class="string">"email"</span>],</div><div class="line">    input[<span class="class"><span class="keyword">type</span></span>=<span class="string">"url"</span>],</div><div class="line">    select{</div><div class="line">      display: <span class="keyword">inline</span>-block;</div><div class="line">      .ms-form-stack %{</div><div class="line">        display: block;</div><div class="line">      }</div><div class="line">    }</div><div class="line">    <span class="comment">// other ruleset</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>outport</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class">.ms-form</span> <span class="tag">input</span><span class="attr_selector">[type="text"]</span>,</div><div class="line"><span class="class">.ms-form</span> <span class="tag">input</span><span class="attr_selector">[type="password"]</span>,</div><div class="line"><span class="class">.ms-form</span> <span class="tag">input</span><span class="attr_selector">[type="email"]</span>,</div><div class="line"><span class="class">.ms-form</span> <span class="tag">input</span><span class="attr_selector">[type="url"]</span>,</div><div class="line"><span class="tag">select</span><span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value">inline-block</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.ms-form-stack</span>  <span class="tag">input</span><span class="attr_selector">[type="text"]</span>,</div><div class="line"><span class="class">.ms-form-stack</span>  <span class="tag">input</span><span class="attr_selector">[type="password"]</span>,</div><div class="line"><span class="class">.ms-form-stack</span>  <span class="tag">input</span><span class="attr_selector">[type="email"]</span>,</div><div class="line"><span class="class">.ms-form-stack</span>  <span class="tag">input</span><span class="attr_selector">[type="url"]</span>,</div><div class="line"><span class="tag">select</span><span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value">block</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p><strong>另外MCSS也可以进行<code>@media</code>的条件嵌套</strong></p>
<h3 id="2-_变量">2. 变量</h3>
<p>变量是CSS Preprocessor的最基本功能，LESS的变量占用了CSS规范中的<a href="http://dev.w3.org/csswg/css-syntax/#at-rule-diagram" target="_blank" rel="external">at-keyword</a> (例如<code>@name</code>)并以<code>:</code>作为分隔, 例如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">name:</span> <span class="number">10px</span></span>;</div></pre></td></tr></table></figure>

<p>而在MCSS中，变量的声明是以为<code>dollar-name</code>(如<code>$name</code>)作为标志</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span> = <span class="number">10</span>px;</div></pre></td></tr></table></figure>

<p><strong>WHY?</strong></p>
<ol>
<li><p><strong>避免冲突</strong>：<br>LESS由于占用<code>@</code>, 达到了在词法上与css一致，成就了它看起来最像CSS的美誉，事实上从语法角度讲，LESS可以说是最不规范的，因为它占用了<code>@at-keyword</code>, 在css中@at-keyword是作为<a href="http://dev.w3.org/csswg/css-syntax/#at-rule-diagram" target="_blank" rel="external"><code>@at-rule</code></a>开始的标志， 这就有潜在冲突的可能性，并且也不利于未来功能的扩展(mcss中所有的功能扩展都是通过自定义@atrule)</p>
</li>
<li><p><strong>赋值符扩展</strong>:<br>除了<code>=</code>，MCSS中有另外两种赋值符号：</p>
<ol>
<li><code>?=</code>: 赋值操作只在变量不存在时进行，例如:</li>
</ol>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$effect</span>-outport = <span class="literal">true</span>;</div><div class="line"><span class="variable">$effect</span>-outport ?= <span class="literal">false</span>;</div></pre></td></tr></table></figure>

<pre><code>此时第二个赋值无效
</code></pre><ol>
<li><code>^=</code>: 它可以将赋值定义在全局作用域，MCSS与LESS一样有作用域，所以有时候需要跳脱作用域限制时，这个赋值符就起作用了</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$global</span> = <span class="number">10</span>px;</div><div class="line">p{</div><div class="line">  <span class="variable">$global</span> ^= <span class="number">20</span>px;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>以上两个赋值符其实都在函数封装时会常用到。</p>
<h3 id="3-_mixin函数">3. mixin函数</h3>
<p>LESS中的<code>mixin</code>跟<code>ruleset</code>是一致的，不过可以带上操作,例如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.<span class="keyword">size</span>(<span class="variable">@width</span>, <span class="variable">@height</span>){</div><div class="line">  width: <span class="variable">@width</span></div><div class="line">}</div><div class="line"><span class="comment">//使用时</span></div><div class="line">p{</div><div class="line">  .<span class="keyword">size</span>(<span class="number">20</span>px, <span class="number">40</span>px);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>而在MCSS中，函数可以达到同样效果。首先了解下MCSS中函数的书写方式，与LESS的mixin一样，一个函数可以有参数，也可以没有，同时在MCSS中，函数是一种值类型，同样可以通过赋值操作进行定义，例如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 带参数</span></div><div class="line"><span class="variable">$size</span> = (<span class="variable">$width</span>, <span class="variable">$height</span>){</div><div class="line">    <span class="variable">$height</span> ?= <span class="variable">$width</span>; <span class="comment">// ?= 操作符的作用场景一</span></div><div class="line">    height: <span class="variable">$height</span>; </div><div class="line">    width: <span class="variable">$width</span>; </div><div class="line">}</div><div class="line"><span class="comment">// 不带参数</span></div><div class="line"><span class="variable">$clearfix</span> = {</div><div class="line">    <span class="variable">*zoom</span>: <span class="number">1</span>;</div><div class="line">    &:before, &:after {</div><div class="line">        display: table;</div><div class="line">        content: <span class="string">""</span>;</div><div class="line">        line-height: <span class="number">0</span>; </div><div class="line">    }</div><div class="line">    &:after {</div><div class="line">        <span class="keyword">clear</span>: both; </div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用时候，你可以用类似的括号来调用，也可以用所谓的<code>隐式调用</code>, 比如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span>{</div><div class="line">    <span class="variable">$clearfix</span>(); <span class="comment">//正常调用</span></div><div class="line">    <span class="variable">$size</span><span class="value">: <span class="number">5px</span>;</span>  <span class="comment">//设置宽高的隐式调用</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">body</span><span class="rules">{</span></div><div class="line">  <span class="rule">*<span class="attribute">zoom</span>:<span class="value"><span class="number">1</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">5px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">5px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">body</span><span class="pseudo">:before</span>,<span class="tag">body</span><span class="pseudo">:after</span><span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value">table</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">content</span>:<span class="value"><span class="string">""</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">line-height</span>:<span class="value"><span class="number">0</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">body</span><span class="pseudo">:after</span><span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">clear</span>:<span class="value">both</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p><strong>需要注意的是，MCSS中的函数是一种真正的值类型，它可以被传递进函数，也可以被函数返回(或用<code>^=</code>操作符定义在全局)，并保留作用域——所谓闭包</strong>，这不仅仅是个语法糖，使得MCSS拥有其它预处理器没有封装能力！。比较近的例子可以查看MCSS的官方函数库<a href="https://github.com/leeluolee/mass#effect" target="_blank" rel="external">mass的effect.mcss</a>，利用它，你可以封装出类似<code>$swing</code>的函数，并且可以传入参数进行效果调整。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">import</span> <span class="string">'https://rawgithub.com/leeluolee/mass/master/mass/effect.mcss'</span>;</span></div><div class="line"></div><div class="line"><span class="variable">$swing</span>(24deg);</div></pre></td></tr></table></figure>

<p><strong>Outport</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span><span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-backface-visibility</span>:<span class="value">hidden</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.animated</span><span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-animation-duration</span>:<span class="value"><span class="number">1s</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-moz-animation-duration</span>:<span class="value"><span class="number">1s</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">animation-duration</span>:<span class="value"><span class="number">1s</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-webkit-animation-fill-mode</span>:<span class="value">both</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-moz-animation-fill-mode</span>:<span class="value">both</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">animation-fill-mode</span>:<span class="value">both</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="at_rule">@<span class="keyword">-webkit-keyframes</span> swing</span>{</div><div class="line">  20%,40%,60%,80%,100%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-webkit-transform-origin</span>:<span class="value">top center</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  20%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">24deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  40%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(-<span class="number">16deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  60%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">8deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  80%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(-<span class="number">8deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  100%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">0deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">}</div><div class="line"><span class="at_rule">@<span class="keyword">-moz-keyframes</span> swing</span>{</div><div class="line">  20%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">24deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  40%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(-<span class="number">16deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  60%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">8deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  80%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(-<span class="number">8deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  100%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-moz-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">0deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">}</div><div class="line"><span class="at_rule">@<span class="keyword">-o-keyframes</span> swing</span>{</div><div class="line">  20%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">24deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">    <span class="tag">-o-transform</span><span class="pseudo">:rotate(-16deg)</span>;</div><div class="line">  }</div><div class="line">  60%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">8deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  80%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(-<span class="number">8deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  100%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">-o-transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">0deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">}</div><div class="line"><span class="at_rule">@<span class="keyword">keyframes</span> swing</span>{</div><div class="line">  20%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">24deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  40%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(-<span class="number">16deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  60%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">8deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  80%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(-<span class="number">8deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  100%<span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">transform</span>:<span class="value"><span class="function">rotate</span>(<span class="number">0deg</span>)</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">}</div><div class="line"><span class="class">.animated</span><span class="class">.swing</span><span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-animation-name</span>:<span class="value">swing</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-moz-animation-name</span>:<span class="value">swing</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">animation-name</span>:<span class="value">swing</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-webkit-transform-origin</span>:<span class="value">top center</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-moz-transform-origin</span>:<span class="value">top center</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-ms-transform-origin</span>:<span class="value">top center</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-o-transform-origin</span>:<span class="value">top center</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">transform-origin</span>:<span class="value">top center</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>这个不仅仅是LESS，是所有其它预处理器没有的能力！</p>
<h3 id="4-_颜色函数">4. 颜色函数</h3>
<p>mcss支持hsl以及hsla的色值格式，最终会被输出为rgba或者<code>#ccc</code></p>
<p>与LESS不同的是，MCSS不提供类似<code>lighten</code>等动词的函数，统一为rgb概念中的red、green、 blue 和 hsl概念中 的hue、saturation、lightness 以及alpha 这7个通道的调节，函数名分别为<code>r-adjust</code>,<code>g-adjust</code>,<code>b-adjust</code>,<code>h-adjust</code>,<code>s-adjust</code>,<code>l-adjust</code>,<code>a-adjust</code> 全部支持相对和绝对调节</p>
<p>比如LESS中<code>lighten</code>、<code>darken</code>其实就是lightness的相对调节</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">color1:</span> <span class="function">lighten</span>(#ccc, <span class="number">10%</span>)</span>;</div><div class="line"><span class="at_rule">@<span class="keyword">color2:</span> <span class="function">darken</span>(#ccc, <span class="number">10%</span>)</span>;</div></pre></td></tr></table></figure>

<p>在MCSS其实就是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$color1</span> = l-adjust(#ccc, <span class="number">10</span><span class="variable">%)</span>; <span class="comment">//往亮调</span></div><div class="line"><span class="variable">$color2</span> = l-adjust(#ccc, -<span class="number">10</span><span class="variable">%)</span>; <span class="comment">// 往暗调节</span></div></pre></td></tr></table></figure>

<p>所以MCSS的色值函数需要你对hsl颜色格式有一定的了解(前端开发应该这是必备的基础概念吧)</p>
<h3 id="5-_操作符">5. 操作符</h3>
<p>MCSS支持所有LESS的操作符(或者说其实MCSS支持JS中的二元以及以下的所有操作符，并且优先级与JS完全一致)</p>
<h2 id="一些LESS所欠缺的能力">一些LESS所欠缺的能力</h2>
<h3 id="1-逻辑控制@for、@if、@elseif、@else">1.逻辑控制<code>@for</code>、<code>@if、@elseif、@else</code></h3>
<p>由于LESS占用了<code>@at-keyword</code>，所以很难提供类似的语言功能。LESS提供一个在选择器上的扩展<code>when</code>但是能力仍然有限。</p>
<h3 id="2-@extend">2.<code>@extend</code></h3>
<p>mixin函数可以帮助我们实现代码片的复用，但是有个巨大的问题就是，mixin会让代码变得庞大(可以看看基于less的bootstrap的重复样式)，当有明显的派生关系时，我们可以使用<code>@extend</code>，<code>@extend</code>是一个源于SASS的概念，它会将派生类的选择器添加到基础类之后。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class">.u-ipt</span> {</div><div class="line">  <span class="attribute">padding</span><span class="value">: <span class="number">5px</span> <span class="number">10px</span>;</span></div><div class="line">  <span class="attribute">box-shadow</span><span class="value">: inset <span class="number">1px</span> <span class="number">1px</span> <span class="number">3px</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="class">.m-form</span>{</div><div class="line">    <span class="tag">input</span><span class="attr_selector">[type="text"]</span>,</div><div class="line">    <span class="tag">input</span><span class="attr_selector">[type="password"]</span>{</div><div class="line">      <span class="at_rule">@<span class="keyword">extend</span><span class="preprocessor"> .u-ipt</span>;</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>Outport</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.<span class="keyword">u</span>-ipt,</div><div class="line">.<span class="keyword">m</span>-form <span class="built_in">input</span>[<span class="built_in">type</span>=<span class="string">"text"</span>],</div><div class="line">.<span class="keyword">m</span>-form <span class="built_in">input</span>[<span class="built_in">type</span>=<span class="string">"password"</span>]</div><div class="line">  paddin<span class="variable">g:5px</span> <span class="number">10</span>px;</div><div class="line">  box-shado<span class="variable">w:inset</span> <span class="number">1</span>px <span class="number">1</span>px <span class="number">3</span>px rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>没有参数的<code>mixin</code>其实都可以用<code>@extend</code>来实现(但<code>@extend</code>一般用在有明显派生关系的ruleset)，MCSS支持多重<code>@extend</code>以及嵌套<code>@extend</code>，具体请查看MCSS主页</p>
<h3 id="3-@abstract">3.<code>@abstract</code></h3>
<p>由于组件封装时，我们无法知道后续是否需要某个ruleset，<code>@abstract</code>这个@atrule的作用是，将一个或多个ruleset标记为不输出，但是仍然可以被派生。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//标记一个ruleset</span></div><div class="line">@<span class="keyword">abstract</span> btn{</div><div class="line">  left: <span class="number">10</span>px</div><div class="line">}</div><div class="line"><span class="comment">//标记一整个块</span></div><div class="line">@<span class="keyword">abstract</span> {</div><div class="line">  .btn{</div><div class="line">  }</div><div class="line">  .fbtn{</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>你也可以抽象一整个文件, 它是<code>@import</code> 的抽象版</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">abstract</span> <span class="string">'ui.mcss'</span></span>;</div></pre></td></tr></table></figure>

<p>比如在团队开发时，<code>ui.mcss</code>已经被公有样式<code>base.mcss</code> import了(即会被所有页面所共用)，但是后续的页面中仍然需要使用ui.mcss的变量、函数或者ruleset，此时<code>@abstract出现了</code>;</p>
<p><strong>ui.mcss</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// btn的mixin函数</span></div><div class="line"><span class="variable">$btn</span> = {</div><div class="line">  padding: <span class="number">10</span>px</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// ui中的ruleset </span></div><div class="line">.u-btn{</div><div class="line">  </div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>base.mcss</strong> </p>
<p>使用<code>@import</code> 会引入<code>ui.mcss</code>中的样式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="preprocessor"><span class="keyword">import</span> ui.mcss</span></div></pre></td></tr></table></figure>

<p><strong>page1.mcss</strong> </p>
<p>使用<code>@absctract</code>，你不会引入任何样式， <strong>但是你仍然可以使用文件中的变量、函数和派生<code>ui.mcss</code>中的ruleset</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@abstract</span> <span class="string">'ui.mcss'</span>;</div><div class="line"></div><div class="line">.u-btn-<span class="number">2</span>{</div><div class="line">  <span class="variable">@extend</span> .u-btn; <span class="regexp">//</span> 仍然可以<span class="variable">@extend</span></div><div class="line">  <span class="variable">$btn</span>();         <span class="regexp">//</span> 仍然可以使用变量、函数</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这样可以解决团队开发中的问题。一套代码完全取决于<code>@import</code>、<code>@abstract</code>和<code>@media</code>三者的调用会有不同的表现。</p>
<h3 id="4-更好的出错信息以及sourcemap">4.更好的出错信息以及sourcemap</h3>
<p>在出现语法错误时，MCSS会给你更精确的信息</p>
<p><img src="https://github-camo.global.ssl.fastly.net/9b3c4a1accf639b9dffbc877275e3e6cca9360c7/687474703a2f2f6c65656c756f6c65652e6769746875622e696f2f6d6373732f696d672f6572726f722e706e67" alt="error图"></p>
<p>同时sourcemap v3格式开始被chrome的developer tool的支持，MCSS也支持(需开启MCSS sourcemap选项，并在chrome的开发者工具的实验特性)</p>
<p><img src="https://github-camo.global.ssl.fastly.net/8933d6c727f1461fbab5592eb48e0e3d778d324c/687474703a2f2f6c65656c756f6c65652e6769746875622e696f2f6d6373732f696d672f736d2e706e67" alt="sourcemap"></p>
<h3 id="5-_MCSS命令行工具">5. MCSS命令行工具</h3>
<p>相对于其他预处理器MCSS的命令行工具参数很简单，并且提供了代码的多种输出格式，以及自动编译的功能，基本上你已经无需其它工具的支持。具体请<code>npm install -g mcss</code> 并且<code>mcss -h</code> 一下</p>
<hr>
<h2 id="结尾感言">结尾感言</h2>
<p>LESS的成功来源于它的<code>简单</code>，成功的阐述了<code>82法则</code>，同时也起到了普及CSS预处理器的作用，事实上接触并且熟悉了LESS的那些概念之后，接受MCSS或者SCSS都是比较轻松的事情。</p>
<p>如果觉得LESS无法满足你的需求时</p>
<blockquote>
<p><strong>npm install -g mcss</strong> 尝试一下吧！</p>
</blockquote>
<p><em>同时MCSS是个易用的CSS Parser哦</em></p>
<p><br></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2>
<p>虽然首页没有开始做，昨天仍决定将<a href="https://github.com/NetEaseWD/mcss" target="_blank" rel="external">MCSS</a>从身边的基友们开始向杭研推广了，从开始做这个直到现在推广遇到最多的问题是：</p>
<blockquote>
<p><strong>不是有LESS了吗？</strong></p>
</blockquote>
<p>这个问题回答了很多遍了，但是觉得回答的都不够好，所以觉得写一篇文章解释一下。其实很多答案也都可以从基于MCSS封装的函数库<a href="https://github.com/leeluolee/mass" target="_blank" rel="external">mass</a>中得到解答，本文针对MCSS的例子都可以在这个<a href="http://leeluolee.github.io/mcss/" target="_blank" rel="external">Try-Page</a>中进行尝试。</p>
]]>
    
    </summary>
    
      <category term="mcss" scheme="http://leeluolee.github.com/tags/mcss/"/>
    
      <category term="css" scheme="http://leeluolee.github.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS预处理器初识]]></title>
    <link href="http://leeluolee.github.com/2013/08/01/mcss-start/"/>
    <id>http://leeluolee.github.com/2013/08/01/mcss-start/</id>
    <published>2013-08-01T14:49:03.000Z</published>
    <updated>2015-04-12T04:24:45.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>这些年，从淘宝的工程师翻译LESS首页以及bootstrap带动的LESS热波及到了国内，预处理器开始渐渐被一些工程师所接受。 <a href="http://www.w3cplus.com/sassguide/comments.html" target="_blank" rel="external">@w3cplus</a> 最近也开了一个预处理器专版,主要是针对SASS，版面不错(相较于SASS主页)。同时豆瓣也利用stylus封装了一个简单css framework, 目前三款预处理器算是都有了一定的受众(当然90%应该都是LESS用户)。</p>
<p>此文会简单进行对预处理器的介绍并进行几款预处理器的简单对比(主要是加入了MCSS,类似的对比文是在太多了)。</p>
<a id="more"></a>
<hr>
<h2 id="CSS的不足_——_抽象能力">CSS的不足 —— 抽象能力</h2>
<p>CSS是一个近乎完美且富有表现力的语言（抛开永无止境的标准化进程不谈）, 但是仍有很多开发者诟病它的不足，总结下大概有以下几点</p>
<ol>
<li>难以维护</li>
<li>无有效做到DRY(Dont repeat yourself)</li>
<li>难以真正将既有经验积淀成实际的代码</li>
<li>缺乏逻辑控制的能力</li>
<li>…………..</li>
</ol>
<p>这以上其实都可以归结为 <strong>抽象能力</strong> 的不足，这个所谓的抽象能力似乎听起来本身就很抽象。我们可以在维基对它的词条上一窥究竟: </p>
<blockquote>
<p>Abstraction tries to reduce and factor out details so that the programmer can focus on a few concepts at a time.</p>
</blockquote>
<p>是的， <strong>抽离细节，关注更少</strong> 这种抽离无所谓大小， 事实上我们在编程中充斥不断的抽象提取的过程: 小到一个变量参数、一个函数， 大到一个类、模块和基于以上的架构模式。</p>
<p>并不仅限于普通编程语言，CSS也有其抽象能力，那就它的名字的含义—— <strong>层叠样式</strong> ，具体到实际开发时，我们做的有可能是定义一个类名，进行增量的功能添加。这几乎也是CSS仅有的抽象能力，也很容易引起滥用，比如设置一个<code>display:none</code>样式的类，然后一个个添加到html中，这其实是应该尽量避免的，过分依赖会导致效率低效和难以维护。</p>
<p>以编程语言的眼光来看，CSS确实抽象能力不足，它也在不断发展（从几套css variable的草案进化就可以一窥端倪）来改善这个问题。但是它实际上并不是一般意义上的编程语言，它有其自身的切实关注点。 这时CSS Preprocessor来解围了。</p>
<h2 id="初识CSS预处理器">初识CSS预处理器</h2>
<p>我们先首先来回顾下CSS预处理这个领域的发展。再来看看它们帮我们解决了什么问题。</p>
<h3 id="预处理的’悠久’历史">预处理的’悠久’历史</h3>
<p>最原始的CSS预处理器的形式可以追溯到利用服务器端模板语言(如php)通过字符插值拼接输出css，最后慢慢演变为类似SASS的css预处理语言, 不过当时的预处理器偏重语言特性多一点, 与CSS的语法偏离较大(可以参考SASS的语法)。 </p>
<p>之后LESS出现, LESS基于CSS语法的超集，带来的好处有很多，这个特性也被Sass社区所接纳。 随着SASS的另一个壳SCSS的产生，CSS-Preprocessor开始统一向着正确轨道靠拢——即基于CSS语法</p>
<p>而11年出现的TJ大神的Stylus似乎要将社区带回最初SASS的位置(虽然它仍然可以支持原生css的写法), 依赖缩进和约定去除多余的符号(比如<code>;</code>、<code>:</code>、<code>{</code>);</p>
<p>下一节我会仔细探讨下当前市面上的各个预处理</p>
<h2 id="市面上的CSS预处理们">市面上的CSS预处理们</h2>
<p>SASS、LESS、Stylus是非常优秀的开源产品, 每一个的产生都推动的社区的前进, 作为一个后来者，MCSS也是广泛参考Sass、Less社区讨论的衍生产物。MCSS也希望自己的理念可以解决前辈们没有解决或未关注到的问题。</p>
<h3 id="1-_SASS_——_最鲁棒和冗杂的预处理器鼻祖">1. <a href="http://sass-lang.com/" target="_blank" rel="external">SASS</a> —— 最鲁棒和冗杂的预处理器鼻祖</h3>
<p>SASS早在07年就有雏形产生，伴随着Rails社区不断发展壮大，到目前为止，仍然在CSS预处理器占有度中占据着半壁江山。google甚至直接在Chrome上对其进行实验性质的支持。<br>但同时SASS也是有几个比较严重的问题的</p>
<ol>
<li><p>基于Ruby </p>
<p>无法更有效的贴近目前实际的前端开发者，之前Sass的壮大主要是由于Rails这个一体化开发框架带来的效应，很多Web开发者承担着CSS的开发任务，而目前前端开发领域越来越复杂，更多的前端开发者有能力和需求去接受css预处理器。</p>
</li>
<li><p>语法有些冗杂</p>
<p>这个一方面是由于Sass悠久的 <strong>历史包袱</strong>引起的, 另一方面也是对功能缺乏取舍的后果。比较典型的例子就是难以捉摸的<code>@extend</code>规则和那些循环语法们</p>
</li>
</ol>
<p>从LESS、SASS的社区活跃度对比来看，这些年LESS要比SASS发展的要好得多，但是SASS比LESS在后续的扩展上要有更大的自由度——依赖自定义<code>@At-rule</code>，而这个在LESS中被占用成了变量声明，LESS只能在选择器上做文章了。</p>
<h3 id="2-_LESS_——_最火和最像CSS的预处理器">2. <a href="http://lesscss.org/" target="_blank" rel="external">LESS</a> —— 最火和最像CSS的预处理器</h3>
<p>目前版本的LESS是基于Nodejs构建，并且可以在浏览器中运行（在实际开发中请忘记这个功能），目前LESS在github上的start数达到了9000，作者遇到的同事用过预处理器的也几乎都是LESS的支持者。</p>
<p><strong>LESS的火的原因是什么?</strong></p>
<ol>
<li><p>拥有50000+ star数的 <strong>bootstrap</strong></p>
<p>有个大平台社区的推动，想不火都难啊。有多少人是因为bootstrap关注到LESS的？ 请举个手。反正我是的</p>
</li>
<li><p>最像CSS</p>
<p>这个像指的是词法上最接近，热爱LESS的人们忘记CSS对于<code>@atrule</code>的定义吧，因为LESS使用了这个词法对象作为参数了，成就了简洁的美誉但是却影响了后续的功能扩展。这同时也带来了其它好处，比如几乎不需要去写对应的语法高亮了，开启css的就行，并且更容易被前端开发所接受。</p>
</li>
<li><p>突出了最常用的80%的功能</p>
<p>众所周知，LESS晚于SASS除了语法上的不同，没有引入额外的功能，而是进行了精简，混合了<code>mixin</code>和<code>ruleset</code>虽然给后续扩展带来不足，但是确实是聪明的设计。</p>
</li>
</ol>
<p>但是事实上，大家似乎很少注意到这点 </p>
<blockquote>
<p>LESS目前仍然没有出现过一个类似Compass这种功能层级的二级类库</p>
</blockquote>
<p>LESS目前有了extend了， 似乎SASS党们无法再攻击它的这个劣势，在我看来LESS似乎是往错误的方向又走了一步，比如两个并列的Selector，你如何判断哪个是extend的？如何处理层级的extend？这些本就可以通过扩展@atrule进行解决，但是设计上走错了一步会导致后续的扩展</p>
<h3 id="3-_Stylus_——_让人眼前一亮的语法设计">3. <a href="http://learnboost.github.io/stylus/" target="_blank" rel="external">Stylus</a> —— 让人眼前一亮的语法设计</h3>
<p>Stylus是Node社区的大神TJ的大作， 看似更少的语法噪音(括号, 冒号，分号)，通过缩进来解释, 事实上可能带来维护的深渊，多种语法支持看似灵活，其实在团队开发中也可能带来灾难。 </p>
<p>综上所述，对于以上三款，我偏向仍然是SASS(SCSS)。文章的末尾 </p>
<h3 id="4-_MCSS">4. <a href="https://github.com/NeteaseWD/mcss" target="_blank" rel="external">MCSS</a></h3>
<p>从SASS出现，再到LESS(LESS在功能上只是子集), 再到Stylus, 语法特性整个社区其实一直在增加，但是无论它们任何一个，其实都没有解决或关注到一些一直存在的问题: </p>
<ol>
<li><p>无法控制一整个文件模块的输出</p>
</li>
<li><p>block不是一种值，无法传递进函数, 这让@keyframes、@media的封装成为不可能</p>
</li>
</ol>
<p>MCSS是我最近完成的CSS预处理器，它同时也可以作为一个 <strong>易用的CSS Parser</strong> , 在小范围已经使用了约两个月， 已经有了完善的测试已经文档， 目前的版本是<code>0.3.4</code> 这里不会事无巨细的介绍太多它的功能点。有兴趣的可以参考</p>
<hr>
<h2 id="CSS预处理器的共性">CSS预处理器的共性</h2>
<p><em>共性是一种类似最佳实践的存在，被各个预处理器社区广泛接受和实现的特性。这里我会以Sass、Less、Mcss三种预处理器进行短暂介绍，以及帮助我们解决什么问题</em></p>
<h4 id="1-_参数、赋值">1. 参数、赋值</h4>
<p>参数是一种最基本的抽象, </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//less</span></div><div class="line">@primary: <span class="comment">#ccc;</span></div><div class="line"></div><div class="line"><span class="comment">//scss</span></div><div class="line"><span class="variable">$primary</span>: <span class="comment">#ccc;</span></div><div class="line"></div><div class="line"><span class="comment">//mcss</span></div><div class="line"><span class="variable">$primary</span> = <span class="comment">#ccc;</span></div></pre></td></tr></table></figure>

<h2 id="CSS预处理的几个误区">CSS预处理的几个误区</h2>
<h2 id="CSS预处理的几个良好实践">CSS预处理的几个良好实践</h2>
<h3 id="1-_嵌套尽量不要超过三层">1. 嵌套尽量不要超过三层</h3>
<p>有人可能会疑问: _使用嵌套层级不就是为了更好的表明</p>
<p>如果你发现你的源文件大范围的超过三层, 或许你应该重构你的html了</p>
<h3 id="2-">2.</h3>
<h2 id="个人实际使用中的预处理器">个人实际使用中的预处理器</h2>
<h2 id="相关资源">相关资源</h2>
<ol>
<li><a href="http://www.vanseodesign.com/css/abstraction/" target="_blank" rel="external">Why Abstraction Can Improve Your CSS</a></li>
<li><a href="http://chriseppstein.github.io/blog/2009/09/20/why-stylesheet-abstraction-matters/" target="_blank" rel="external">why stylesheet abstraction matters</a></li>
<li><a href="http://dev.w3.org/csswg/css3-syntax/#parsing" target="_blank" rel="external">CSS Syntax</a></li>
<li><a href="http://css-tricks.com/poll-results-popularity-of-css-preprocessors/" target="_blank" rel="external">几个预处理器的流行度对比 2012数据</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/CSS/Syntax" target="_blank" rel="external">来自mdn的CSS syntax中文解释 短小精悍</a></li>
<li><a href="http://css-tricks.com/musings-on-preprocessing/" target="_blank" rel="external">musing on preprocessing</a></li>
</ol>
<h2 id="后续">后续</h2>
<ol>
<li>后续我会仔细阐述mcss的语法以及功能特性以及这个特性所要解决的问题</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2>
<p>这些年，从淘宝的工程师翻译LESS首页以及bootstrap带动的LESS热波及到了国内，预处理器开始渐渐被一些工程师所接受。 <a href="http://www.w3cplus.com/sassguide/comments.html" target="_blank" rel="external">@w3cplus</a> 最近也开了一个预处理器专版,主要是针对SASS，版面不错(相较于SASS主页)。同时豆瓣也利用stylus封装了一个简单css framework, 目前三款预处理器算是都有了一定的受众(当然90%应该都是LESS用户)。</p>
<p>此文会简单进行对预处理器的介绍并进行几款预处理器的简单对比(主要是加入了MCSS,类似的对比文是在太多了)。</p>
]]>
    
    </summary>
    
      <category term="mcss" scheme="http://leeluolee.github.com/tags/mcss/"/>
    
      <category term="css" scheme="http://leeluolee.github.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开始使用Hexo]]></title>
    <link href="http://leeluolee.github.com/2013/03/02/use-hexo/"/>
    <id>http://leeluolee.github.com/2013/03/02/use-hexo/</id>
    <published>2013-03-02T03:34:51.000Z</published>
    <updated>2015-04-06T13:59:36.000Z</updated>
    <content type="html"><![CDATA[<p>去年毕业后配置Otcopress完后就没用过了,反正不会去折腾Ruby，发现问题也不好解决，索性就换到<a href="http://zespia.tw/hexo/" target="_blank" rel="external">Hexo</a>了, 文档很丰富, 没有累赘的功能部署很快, 简单记录下</p>
<a id="more"></a>
<h2 id="安装">安装</h2>
<p>直接npm安装:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> hexo -g</span></div><div class="line">cd/ path/<span class="keyword">to</span>/your/blog/root</div><div class="line">hexo init {your_site_name}</div></pre></td></tr></table></figure>

<p>回忆下Otcopress在windows的安装简直不堪忍受, 数小时之久(当然我不熟悉Ruby这个生态圈也有关系)。</p>
<h2 id="配置">配置</h2>
<p>主要是github的配置, 这里记得如果username.github.com这个仓库已经有了资源，要进行手动清理. 还有一个就是yaml里的deploy项要填写完整的Repository 地址(坑1), 如:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># Deployment</span></div><div class="line"><span class="preprocessor">## Docs: http://zespia.tw/hexo/docs/deploy.html</span></div><div class="line">deploy:</div><div class="line">  type: github</div><div class="line">  repository: https:<span class="comment">//github.com/leeluolee/leeluolee.github.com</span></div><div class="line">  branch: master</div></pre></td></tr></table></figure>

<p>如果是项目的gh-pages, 则branch填gh-pages。完了之后如果还不行就进入<code>.deploy</code>目录手动添加一个名为<strong>github</strong> 的remote branch，例如<br><code>git remote add github {你仓库名}</code></p>
<h2 id="书写">书写</h2>
<p>hexo支持摘要断行 <code>&lt;!-- more --&gt;</code></p>
<h2 id="坑">坑</h2>
<ol>
<li>尽量将source和page分在不同的repo里</li>
<li>关于swig模板与代码高亮的冲突:   即可</li>
</ol>
<h2 id="结尾">结尾</h2>
<p>Hexo是一个很精简的blog generator &amp;&amp; deploy, 完全满足技术人员日常的博客需求, 使用过Octopress的应该是完全没有学习成本, 本人是典型极简癖, 跟这个Hexo简直是一拍即合</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>去年毕业后配置Otcopress完后就没用过了,反正不会去折腾Ruby，发现问题也不好解决，索性就换到<a href="http://zespia.tw/hexo/" target="_blank" rel="external">Hexo</a>了, 文档很丰富, 没有累赘的功能部署很快, 简单记录下</p>
]]>
    
    </summary>
    
      <category term="tool" scheme="http://leeluolee.github.com/tags/tool/"/>
    
  </entry>
  
</feed>
